<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸿的博客</title>
  
  <subtitle>一饮一啄，皆有定数</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-24T08:17:46.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cwhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu删除多余内核</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/Ubuntu%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E5%86%85%E6%A0%B8/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/Ubuntu删除多余内核/</id>
    <published>2018-12-24T08:17:46.175Z</published>
    <updated>2018-12-24T08:17:46.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu删除多余内核"><a href="#Ubuntu删除多余内核" class="headerlink" title="Ubuntu删除多余内核"></a>Ubuntu删除多余内核</h1><p>&nbsp;</p><blockquote><p>首先查询当前我们使用的是内核是那个版本别删错了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第二：<br>查询系统中装了多少内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep linux</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第三：<br>多余的内核可以通过命令删除 需要删除header和image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove linux-image-*.*.*-**（*号用你想删除的实际情况改写）</span><br><span class="line">sudo apt-get remove linux-headers-*.*.*-**（*号用你想删除的实际情况改写）</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第四：<br>执行完上面命令后再次执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep linux</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看内核是否都删除干净了。没干净继续删除。有的内核后面会显示是deinstall 那需要通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections | grep deinstall | sed &apos;s/deinstall/\lpurge/&apos; | sudo dpkg --set-selections; sudo dpkg -Pa</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>通过上面方法就可以。<br>还有一种通过正则表达式匹配内核然后除最新的统统统统删除的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l &apos;linux-*&apos; | sed &apos;/^ii/!d;/&apos;&quot;$(uname -r | sed &quot;s/-/\1/&quot;)&quot;&apos;/d;s/^[^ ]* [^ ]* .*/\1/;/[0-9]/!d&apos; | xargs sudo apt-get -y purge</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu删除多余内核&quot;&gt;&lt;a href=&quot;#Ubuntu删除多余内核&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu删除多余内核&quot;&gt;&lt;/a&gt;Ubuntu删除多余内核&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先查
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装QQ（for linux）</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/Ubuntu16-04%E5%AE%89%E8%A3%85QQ%EF%BC%88for-linux%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/Ubuntu16-04安装QQ（for-linux）/</id>
    <published>2018-12-24T08:17:12.271Z</published>
    <updated>2018-12-24T08:17:12.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu16-04安装QQ（for-linux"><a href="#Ubuntu16-04安装QQ（for-linux" class="headerlink" title="Ubuntu16.04安装QQ（for linux)"></a>Ubuntu16.04安装QQ（for linux)</h1><p>&nbsp;</p><blockquote><p>1.安装wine<br>1.1添加PPA</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-wine/ppa</span><br></pre></td></tr></table></figure><blockquote><p>1.2更新列表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><blockquote><p>1.3安装Wine</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wine1.8 winetricks </span><br><span class="line">(note :wine may need updata)</span><br></pre></td></tr></table></figure><blockquote><p>为了避免错误大家可以使用以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><blockquote><p>2.下载wineQQ<br><a href="http://www.ubuntukylin.com/application/show.php?lang=cn&amp;id=279" target="_blank" rel="noopener">http://www.ubuntukylin.com/application/show.php?lang=cn&amp;id=279</a><br>&nbsp;<br>3.安装解压软件 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install unar</span><br></pre></td></tr></table></figure><blockquote><p>4.进入文件下载目录，解压并安装。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ unar wine-qqintl.zip</span><br><span class="line"></span><br><span class="line">$ cd wine-qqintl</span><br></pre></td></tr></table></figure><blockquote><p>安装此目录下的所有文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg -i fonts-wqy-microhei_0.2.0-beta-2_all.deb</span><br><span class="line"></span><br><span class="line">$ sudo dpkg -i ttf-wqy-microhei_0.2.0-beta-2_all.deb</span><br><span class="line"></span><br><span class="line">$ sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb</span><br></pre></td></tr></table></figure><blockquote><p>5.在search your computer 输入QQ查找刚装载的QQ即可<br>&nbsp;<br>二.问题与解决<br>最后一个包安装有问题的话　 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get -f install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu16-04安装QQ（for-linux&quot;&gt;&lt;a href=&quot;#Ubuntu16-04安装QQ（for-linux&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu16.04安装QQ（for linux)&quot;&gt;&lt;/a&gt;Ubuntu16.0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu-有什么奇技淫巧</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/Ubuntu-%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7%EF%BC%9F/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/Ubuntu-有什么奇技淫巧？/</id>
    <published>2018-12-24T08:16:35.099Z</published>
    <updated>2018-12-24T08:16:35.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-有什么奇技淫巧"><a href="#Ubuntu-有什么奇技淫巧" class="headerlink" title="Ubuntu-有什么奇技淫巧"></a>Ubuntu-有什么奇技淫巧</h1><p>&nbsp;</p><blockquote><p>作者：xlzd<br>链接：<a href="https://www.zhihu.com/question/27764060/answer/39459621" target="_blank" rel="noopener">https://www.zhihu.com/question/27764060/answer/39459621</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmatrix</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>输入密码，安装后，按F11把terminal全屏，输入『cmatrix -b』，逼格瞬间暴增，最好旁边有个妹子。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/12110500-b2a1d94faaa2c3c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/12110500-b035b354dd7abc7d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sl</span><br></pre></td></tr></table></figure><blockquote><p>安装后执行『sl』，怒看屏幕上一辆火车开过。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/12110500-33876568a536e4b7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/12110500-72f6826daf605573.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install figlet</span><br><span class="line">sudo apt-get install toilet</span><br></pre></td></tr></table></figure><blockquote><p>试一下这两个小命令，生成艺术字<br>figlet some text<br>toilet some other text<br>&nbsp;</p></blockquote><h2 id="还可以添加颜色，man一下具体用法吧"><a href="#还可以添加颜色，man一下具体用法吧" class="headerlink" title="还可以添加颜色，man一下具体用法吧"></a>还可以添加颜色，man一下具体用法吧</h2><blockquote><p>xeyes<br>屏幕出现一双眼睛，直到你按下【ctrl + c】强制结束。</p></blockquote><h2 id="nbsp"><a href="#nbsp" class="headerlink" title="&nbsp;"></a>&nbsp;</h2><blockquote><p>yes<br>输出无穷无尽的字符，如【yes xlzd】将一直输出【xlzd】</p></blockquote><hr><blockquote><p>factor<br>分解因数</p></blockquote><hr><blockquote><p>fortune/<br>输出一句笑话/名言/诗文等等</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu-有什么奇技淫巧&quot;&gt;&lt;a href=&quot;#Ubuntu-有什么奇技淫巧&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu-有什么奇技淫巧&quot;&gt;&lt;/a&gt;Ubuntu-有什么奇技淫巧&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux和windows中命令行编译qt程序步骤</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/linux%E5%92%8Cwindows%E4%B8%AD%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91qt%E7%A8%8B%E5%BA%8F%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/linux和windows中命令行编译qt程序步骤/</id>
    <published>2018-12-24T08:16:05.160Z</published>
    <updated>2018-12-24T08:16:05.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux和windows中命令行编译qt程序步骤"><a href="#linux和windows中命令行编译qt程序步骤" class="headerlink" title="linux和windows中命令行编译qt程序步骤"></a>linux和windows中命令行编译qt程序步骤</h1><p>&nbsp;</p><h1 id="linux和windows中命令行编译qt程序步骤-1"><a href="#linux和windows中命令行编译qt程序步骤-1" class="headerlink" title="linux和windows中命令行编译qt程序步骤"></a><a href="http://www.cnblogs.com/xiahaimq/p/6269429.html" target="_blank" rel="noopener">linux和windows中命令行编译qt程序步骤</a></h1><h2 id="linux平台命令行编译"><a href="#linux平台命令行编译" class="headerlink" title="linux平台命令行编译"></a>linux平台命令行编译</h2><h2 id="1-检查一下qmake版本（可省略）"><a href="#1-检查一下qmake版本（可省略）" class="headerlink" title="1.检查一下qmake版本（可省略）"></a>1.检查一下qmake版本（可省略）</h2><pre><code>qmake -v       which qmake</code></pre><h2 id="2-具体步骤"><a href="#2-具体步骤" class="headerlink" title="2.具体步骤"></a>2.具体步骤</h2><p>以/home/michael/program_reference/hello.cpp工程为例，</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.  `#include &lt;QApplication&gt;`</span><br><span class="line">2.  `#include &lt;QLabel&gt;`</span><br><span class="line">3.  `#include &lt;QtDebug&gt;`</span><br><span class="line"></span><br><span class="line">5.  `int main(int argc,char* argv[])`</span><br><span class="line">6.  `&#123;`</span><br><span class="line">7.  `QApplication a(argc,argv);`</span><br><span class="line"></span><br><span class="line">9.  `QLabel label(&quot;hello&quot;);`</span><br><span class="line">10.  `label.show();`</span><br><span class="line"></span><br><span class="line">12.  `qDebug()&lt;&lt;&quot;hell mq&quot;;`</span><br><span class="line"></span><br><span class="line">14.  `return a.exec();`</span><br><span class="line">15.  `&#125;`</span><br></pre></td></tr></table></figure></p><p>编译过程如下： </p><h3 id="2-1-在-hello-cpp所在目录下，运行命令：qmake-project"><a href="#2-1-在-hello-cpp所在目录下，运行命令：qmake-project" class="headerlink" title="2.1.在 hello.cpp所在目录下，运行命令：qmake  -project"></a>2.1.在 hello.cpp所在目录下，运行命令：qmake  -project</h3><pre><code>hello.cpp 同目录下有hello.pro文件被生成，它是与平台无关的工程文件。注：此处因为版本QT4和QT5的原因，需要修改hello.pro文件，具体修改内容如下：在.pro文件中加入以下代码：</code></pre><ol><li><code>QT += widgets core gui</code></li></ol><h3 id="2-2-在-hello-cpp所在目录下，运行命令：qmake-hello-pro"><a href="#2-2-在-hello-cpp所在目录下，运行命令：qmake-hello-pro" class="headerlink" title="2.2. 在 hello.cpp所在目录下，运行命令：qmake hello.pro"></a>2.2. 在 hello.cpp所在目录下，运行命令：qmake hello.pro</h3><pre><code>同目录下有 Makefile文件被生成（Makefile是指导编译器编译源代码的配置文件，在其目录下输入make命令(nmake在win32,vc6环境)就可以完成编译）。  </code></pre><h3 id="2-3-在-hello-cpp所在目录下，运行命令：make"><a href="#2-3-在-hello-cpp所在目录下，运行命令：make" class="headerlink" title="2.3.在 hello.cpp所在目录下，运行命令：make"></a>2.3.在 hello.cpp所在目录下，运行命令：make</h3><pre><code>同目录下有 hello,hello.o两个文件被编译生成。其中 hello就是在当前 Linux 系统下使用 Qt编译生成的可执行文件了。</code></pre><p><small style="box-sizing: border-box; outline: 0px; word-break: break-all;">来源： <a href="http://blog.csdn.net/imxiangzi/article/details/7454276" target="_blank" rel="noopener">http://blog.csdn.net/imxiangzi/article/details/7454276</a></small></p><h2 id="windows平台命令行编译"><a href="#windows平台命令行编译" class="headerlink" title="windows平台命令行编译"></a>windows平台命令行编译</h2><p>注：此方法未经本人证实</p><h2 id="1、打开环境变量设置窗口，编辑-PATH-变量，添加如下内容："><a href="#1、打开环境变量设置窗口，编辑-PATH-变量，添加如下内容：" class="headerlink" title="1、打开环境变量设置窗口，编辑 PATH 变量，添加如下内容："></a>1、打开环境变量设置窗口，编辑 PATH 变量，添加如下内容：</h2><pre><code>c:/Qt/2010.02.1/bin/;c:/Qt/2010.02.1/qt/bin/;c:/Qt/2010.02.1/mingw/bin/ </code></pre><h2 id="2、打开环境变量设置窗口，添加环境变量QTDIR："><a href="#2、打开环境变量设置窗口，添加环境变量QTDIR：" class="headerlink" title="2、打开环境变量设置窗口，添加环境变量QTDIR："></a>2、打开环境变量设置窗口，添加环境变量QTDIR：</h2><pre><code>变量名：QTDIR变量值：C:/Qt/2010.02.1/qt </code></pre><h2 id="3、打开环境变量设置窗口，添加环境变量QMAKESPEC："><a href="#3、打开环境变量设置窗口，添加环境变量QMAKESPEC：" class="headerlink" title="3、打开环境变量设置窗口，添加环境变量QMAKESPEC："></a>3、打开环境变量设置窗口，添加环境变量QMAKESPEC：</h2><pre><code>变量名：QMAKESPEC变量值：win32-g++ </code></pre><h2 id="4、现在已经可以进行命令行模式的编译了，例如："><a href="#4、现在已经可以进行命令行模式的编译了，例如：" class="headerlink" title="4、现在已经可以进行命令行模式的编译了，例如："></a>4、现在已经可以进行命令行模式的编译了，例如：</h2><pre><code>a、建立一个空文件夹 hello，然后在其中建立一个空文件 hello.cpp，编辑并保存此文件。#include QApplication&gt;#include QPushButton&gt;int main(int argc,char* argv[]){    QApplication app(argc,argv);    QPushButton * bt = new QPushButton(&quot;quit&quot;);    QObject::connect(bt,SIGNAL(clicked()),&amp;app,SLOT(exit()));    bt-&gt;show();    return app.exec();}b、在hello目录下，命令行输入运行 qmake -project，生成 hello.proc、在hello目录下，命令行输入运行 qmake hello.pro，生成了 makefiled、在hello目录下，命令行输入运行 mingw32-make，生成了 hello.exe（位于 Debug 目录下）e、进入 Debug 目录，执行 hello.exe</code></pre><p>转载自：<a href="https://www.cnblogs.com/xiahaimq/p/6269429.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiahaimq/p/6269429.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux和windows中命令行编译qt程序步骤&quot;&gt;&lt;a href=&quot;#linux和windows中命令行编译qt程序步骤&quot; class=&quot;headerlink&quot; title=&quot;linux和windows中命令行编译qt程序步骤&quot;&gt;&lt;/a&gt;linux和windo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fedora删除多余不用的内核</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/fedora%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E4%B8%8D%E7%94%A8%E7%9A%84%E5%86%85%E6%A0%B8/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/fedora删除多余不用的内核/</id>
    <published>2018-12-24T08:15:35.580Z</published>
    <updated>2018-12-24T08:15:35.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fedora删除多余不用的内核"><a href="#fedora删除多余不用的内核" class="headerlink" title="fedora删除多余不用的内核"></a>fedora删除多余不用的内核</h1><p>&nbsp;<br><strong>原创 2012年07月06日 15:57:18</strong></p><ul><li>6523</li></ul><blockquote><p>（1）查询安装的所有内核</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep kernel</span><br><span class="line">kernel-PAE-3.4.2-1.fc16.i686</span><br><span class="line">kernel-PAE-devel-3.4.2-1.fc16.i686</span><br><span class="line">kernel-PAE-devel-3.1.0-7.fc16.i686</span><br><span class="line">kernel-headers-3.4.2-1.fc16.i686</span><br><span class="line">abrt-addon-kerneloops-2.0.7-2.fc16.i686</span><br><span class="line">kernel-devel-3.3.2-6.fc16.i686</span><br><span class="line">kernel-PAE-3.3.5-2.fc16.i686</span><br><span class="line">kernel-PAE-devel-3.3.5-2.fc16.i686</span><br><span class="line">kernel-devel-3.4.2-1.fc16.i686</span><br><span class="line">kernel-devel-3.3.5-2.fc16.i686</span><br><span class="line">kernel-PAE-3.1.0-7.fc16.i686</span><br><span class="line">libreport-plugin-kerneloops-2.0.8-4.fc16.i686</span><br></pre></td></tr></table></figure><blockquote><p>我这里查出了很多个啊，看来fedora偷偷做了更新。<br>&nbsp;<br>（2）查询当前正在使用的内核</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname -r</span><br><span class="line">3.1.0-7.fc16.i686.PAE</span><br></pre></td></tr></table></figure><blockquote><p>我的是3.1.0的，因为在做开发，不想频繁更新内核，故把要把其它多余的都给干掉。<br>&nbsp;<br>（3）删除多余的内核</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum remove kernel-PAE-3.4.2*</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum remove kernel-PAE-devel-3.4.2*</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum remove kernel-devel-3.4.2*</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum remove kernel-devel-3.3.2*</span><br></pre></td></tr></table></figure><blockquote><p>删除即可。<br>&nbsp;<br>（4）重启计算机</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# reboot</span><br></pre></td></tr></table></figure><blockquote><p>转载自：<a href="http://blog.csdn.net/charlsecharlse/article/details/7722478" target="_blank" rel="noopener">http://blog.csdn.net/charlsecharlse/article/details/7722478</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fedora删除多余不用的内核&quot;&gt;&lt;a href=&quot;#fedora删除多余不用的内核&quot; class=&quot;headerlink&quot; title=&quot;fedora删除多余不用的内核&quot;&gt;&lt;/a&gt;fedora删除多余不用的内核&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;strong&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fedora-安装lantern</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/fedora-%E5%AE%89%E8%A3%85lantern/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/fedora-安装lantern/</id>
    <published>2018-12-24T08:15:25.244Z</published>
    <updated>2018-12-24T08:15:25.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fedora-安装lantern"><a href="#fedora-安装lantern" class="headerlink" title="fedora-安装lantern"></a>fedora-安装lantern</h1><p>&nbsp;</p><blockquote><p>第一步：添加源<br>&nbsp;<br>dnf copr enable yelanxin/lantern<br>&nbsp;<br>第二步：dnf安装<br>&nbsp;<br>dnf<br> install lantern</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fedora-安装lantern&quot;&gt;&lt;a href=&quot;#fedora-安装lantern&quot; class=&quot;headerlink&quot; title=&quot;fedora-安装lantern&quot;&gt;&lt;/a&gt;fedora-安装lantern&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++ (笔记) 浅析vector容器的实例</title>
    <link href="http://yoursite.com/2018/12/24/%E9%97%AE%E9%A2%98%E9%9A%8F%E7%AC%94/C++%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89%E6%B5%85%E6%9E%90vector%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/12/24/问题随笔/C++（笔记）浅析vector容器的实例/</id>
    <published>2018-12-24T08:14:58.424Z</published>
    <updated>2018-12-24T08:14:58.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-笔记-浅析vector容器的实例"><a href="#C-笔记-浅析vector容器的实例" class="headerlink" title="C++ (笔记) 浅析vector容器的实例"></a>C++ (笔记) 浅析vector容器的实例</h1><p>&nbsp;</p><h2 id="一、什么是vector"><a href="#一、什么是vector" class="headerlink" title="一、什么是vector"></a>一、什么是vector</h2><blockquote><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p></blockquote><hr><h2 id="二、容器特性"><a href="#二、容器特性" class="headerlink" title="二、容器特性"></a>二、容器特性</h2><h3 id="1-顺序序列"><a href="#1-顺序序列" class="headerlink" title="1.顺序序列"></a>1.顺序序列</h3><blockquote><p>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p></blockquote><h3 id="2-动态数组"><a href="#2-动态数组" class="headerlink" title="2.动态数组"></a>2.动态数组</h3><blockquote><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。操供了在序列末尾相对快速地添加/删除元素的操作。</p></blockquote><h3 id="3-能够感知内存分配器的（Allocator-aware）"><a href="#3-能够感知内存分配器的（Allocator-aware）" class="headerlink" title="3.能够感知内存分配器的（Allocator-aware）"></a>3.能够感知内存分配器的（Allocator-aware）</h3><blockquote><p>容器使用一个内存分配器对象来动态地处理它的存储需求。</p></blockquote><hr><h2 id="二、基本函数实现"><a href="#二、基本函数实现" class="headerlink" title="二、基本函数实现"></a>二、基本函数实现</h2><h3 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h3><ul><li>vector():创建一个空vector</li><li>vector(int nSize):创建一个vector,元素个数为nSize</li><li>vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t</li><li>vector(const vector&amp;):复制构造函数</li><li>vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</li></ul><h3 id="2-增加函数"><a href="#2-增加函数" class="headerlink" title="2.增加函数"></a>2.增加函数</h3><ul><li>void push_back(const T&amp; x):向量尾部增加一个元素X</li><li>iterator insert(iterator it,const T&amp; x):向量中迭代器指向元素前增加一个元素x</li><li>iterator insert(iterator it,int n,const T&amp; x):向量中迭代器指向元素前增加n个相同的元素x</li><li>iterator insert(iterator it,const_iterator first,const_iterator last):向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</li></ul><h3 id="3-删除函数"><a href="#3-删除函数" class="headerlink" title="3.删除函数"></a>3.删除函数</h3><ul><li>iterator erase(iterator it):删除向量中迭代器指向元素</li><li>iterator erase(iterator first,iterator last):删除向量中[first,last)中元素</li><li>void pop_back():删除向量中最后一个元素</li><li>void clear():清空向量中所有元素</li></ul><h3 id="4-遍历函数"><a href="#4-遍历函数" class="headerlink" title="4.遍历函数"></a>4.遍历函数</h3><ul><li>reference at(int pos):返回pos位置元素的引用</li><li>reference front():返回首元素的引用</li><li>reference back():返回尾元素的引用</li><li>iterator begin():返回向量头指针，指向第一个元素</li><li>iterator end():返回向量尾指针，指向向量最后一个元素的下一个位置</li><li>reverse_iterator rbegin():反向迭代器，指向最后一个元素</li><li>reverse_iterator rend():反向迭代器，指向第一个元素之前的位置</li></ul><h3 id="5-判断函数"><a href="#5-判断函数" class="headerlink" title="5.判断函数"></a>5.判断函数</h3><ul><li>bool empty() const:判断向量是否为空，若为空，则向量中无元素</li></ul><h3 id="6-大小函数"><a href="#6-大小函数" class="headerlink" title="6.大小函数"></a>6.大小函数</h3><ul><li>int size() const:返回向量中元素的个数</li><li>int capacity() const:返回当前向量张红所能容纳的最大元素值</li><li>int max_size() const:返回最大可允许的vector元素数量值</li></ul><h3 id="7-其他函数"><a href="#7-其他函数" class="headerlink" title="7.其他函数"></a>7.其他函数</h3><ul><li>void swap(vector&amp;):交换两个同类型向量的数据</li><li>void assign(int n,const T&amp; x):设置向量中第n个元素的值为x</li><li>void assign(const_iterator first,const_iterator last):向量中[first,last)中元素设置成当前向量元素</li></ul><h3 id="8-看着清楚"><a href="#8-看着清楚" class="headerlink" title="8.看着清楚"></a>8.看着清楚</h3><blockquote><p>1.push_back 在数组的最后添加一个数据<br>2.pop_back 去掉数组的最后一个数据<br>3.at 得到编号位置的数据<br>4.begin 得到数组头的指针<br>5.end 得到数组的最后一个单元+1的指针<br>6．front 得到数组头的引用<br>7.back 得到数组的最后一个单元的引用<br>8.max_size 得到vector最大可以是多大<br>9.capacity 当前vector分配的大小<br>10.size 当前使用数据的大小<br>11.resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值<br>12.reserve 改变当前vecotr所分配空间的大小<br>13.erase 删除指针指向的数据项<br>14.clear 清空当前的vector<br>15.rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)<br>16.rend 将vector反转构的结束指针返回(其实就是原来的begin-1)<br>17.empty 判断vector是否为空<br>18.swap 与另一个vector交换数据</p></blockquote><hr><h2 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h2><p>#include &lt; vector&gt;<br>using namespace std;</p><h2 id="四、简单介绍"><a href="#四、简单介绍" class="headerlink" title="四、简单介绍"></a>四、简单介绍</h2><ol><li>Vector&lt;类型&gt;标识符</li><li>Vector&lt;类型&gt;标识符(最大容量)</li><li>Vector&lt;类型&gt;标识符(最大容量,初始所有值)</li><li>Int i[5]={1,2,3,4,5}<br>Vector&lt;类型&gt;vi(I,i+2);//得到i索引值为3以后的值</li><li>Vector&lt; vector&lt; int&gt; &gt;v; 二维向量//这里最外的&lt;&gt;要有空格。否则在比较旧的编译器下无法通过</li></ol><hr><h2 id="实例来咯"><a href="#实例来咯" class="headerlink" title="实例来咯"></a>实例来咯</h2><h3 id="1-pop-back-amp-push-back-elem-实例在容器最后移除和插入数据"><a href="#1-pop-back-amp-push-back-elem-实例在容器最后移除和插入数据" class="headerlink" title="1.pop_back()&amp;push_back(elem)实例在容器最后移除和插入数据"></a>1.pop_back()&amp;push_back(elem)实例在容器最后移除和插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt;obj(10,0);//最大容器为10，都初始化为0</span><br><span class="line">    for(int i=0;i&lt;10;i++)//push_back(elem)在数组最后添加数据</span><br><span class="line">    &#123;</span><br><span class="line">        obj.push_back(i);</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;5;i++)//去掉数组最后一个数据</span><br><span class="line">    &#123;</span><br><span class="line">        obj.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;\n&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;obj.size();i++)//size()容器中实际数据个数</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12110500-5d10e1cad5097015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-clear-清除容器中所以数据"><a href="#2-clear-清除容器中所以数据" class="headerlink" title="2.clear()清除容器中所以数据"></a>2.clear()清除容器中所以数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt;obj;</span><br><span class="line">    for(int i=0;i&lt;10;i++)//push_back(elem)在数组最后添加数据</span><br><span class="line">    &#123;</span><br><span class="line">        obj.push_back(i);</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    obj.clear();//清除容器中所以数据</span><br><span class="line">    for(int i=0;i&lt;obj.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12110500-38ef7523f00be9bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-排序"><a href="#3-排序" class="headerlink" title="3.排序"></a>3.排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt;obj;</span><br><span class="line"></span><br><span class="line">    obj.push_back(1);</span><br><span class="line">    obj.push_back(3);</span><br><span class="line">    obj.push_back(0);</span><br><span class="line"></span><br><span class="line">    sort(obj.begin(),obj.end());//从小到大</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;从小到大:&quot;&lt;&lt;endl;</span><br><span class="line">    for(int i=0;i&lt;obj.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;\n&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;从大到小:&quot;&lt;&lt;endl;</span><br><span class="line">    reverse(obj.begin(),obj.end());//从大到小</span><br><span class="line">    for(int i=0;i&lt;obj.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12110500-5dc62d8ea29a81ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>1.注意sort需要头文件#include &lt; algorithm&gt;<br>2.如果想sort来降序，可重写sort<br>bool compare(int a,int b)<br>{<br>return a&lt; b; //升序排列，如果改为return a&gt;b，则为降序<br>}<br>int a[20]={2,4,1,23,5,76,0,43,24,65},i;<br>for(i=0;i&lt;20;i++)<br>cout&lt;&lt; a[i]&lt;&lt; endl;<br>sort(a,a+20,compare);</p></blockquote><h3 id="4-访问（直接数组访问-amp-迭代器访问）"><a href="#4-访问（直接数组访问-amp-迭代器访问）" class="headerlink" title="4.访问（直接数组访问&amp;迭代器访问）"></a>4.访问（直接数组访问&amp;迭代器访问）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //顺序访问</span><br><span class="line">    vector&lt;int&gt;obj;</span><br><span class="line">    for(int i=0;i&lt;10;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        obj.push_back(i);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;直接利用数组：&quot;;</span><br><span class="line">    for(int i=0;i&lt;10;i++)//方法一</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;obj[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;利用迭代器：&quot; ;</span><br><span class="line">    //方法二，使用迭代器将容器中数据输出</span><br><span class="line">    vector&lt;int&gt;::iterator it;//声明一个迭代器，来访问vector容器，作用：遍历或者指向vector容器的元素</span><br><span class="line">    for(it=obj.begin();it!=obj.end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12110500-4900b04ed70f37ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="5-二维数组两种定义方法（结果一样）"><a href="#5-二维数组两种定义方法（结果一样）" class="headerlink" title="5.二维数组两种定义方法（结果一样）"></a>5.二维数组两种定义方法（结果一样）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N=5, M=6;</span><br><span class="line">    vector&lt;vector&lt;int&gt; &gt; obj(N); //定义二维动态数组大小5行</span><br><span class="line">    for(int i =0; i&lt; obj.size(); i++)//动态二维数组为5行6列，值全为0</span><br><span class="line">    &#123;</span><br><span class="line">        obj[i].resize(M);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=0; i&lt; obj.size(); i++)//输出二维动态数组</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;obj[i].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;obj[i][j]&lt;&lt;&quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;string.h&gt;　</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N=5, M=6;</span><br><span class="line">    vector&lt;vector&lt;int&gt; &gt; obj(N, vector&lt;int&gt;(M)); //定义二维动态数组5行6列</span><br><span class="line"></span><br><span class="line">    for(int i=0; i&lt; obj.size(); i++)//输出二维动态数组</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;obj[i].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;obj[i][j]&lt;&lt;&quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12110500-dbea7c3733ab74b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-笔记-浅析vector容器的实例&quot;&gt;&lt;a href=&quot;#C-笔记-浅析vector容器的实例&quot; class=&quot;headerlink&quot; title=&quot;C++ (笔记) 浅析vector容器的实例&quot;&gt;&lt;/a&gt;C++ (笔记) 浅析vector容器的实例&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>csp-2017-09-02-公共钥匙盒</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/csp-2017-09-02%E5%85%AC%E5%85%B1%E9%92%A5%E5%8C%99%E7%9B%92/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/csp-2017-09-02公共钥匙盒/</id>
    <published>2018-12-24T08:14:19.516Z</published>
    <updated>2018-12-24T08:14:19.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="公共钥匙盒"><a href="#公共钥匙盒" class="headerlink" title="公共钥匙盒"></a>公共钥匙盒</h1><p>&nbsp;</p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>试题编号：    201709-2<br>试题名称：    公共钥匙盒<br>时间限制：    1.0s<br>内存限制：    256.0MB<br>问题描述：<br>　　有一个学校的老师共用N个教室，按照规定，所有的钥匙都必须放在公共钥匙盒里，老师不能带钥匙回家。每次老师上课前，都从公共钥匙盒里找到自己上课的教室的钥匙去开门，上完课后，再将钥匙放回到钥匙盒中。<br>　　钥匙盒一共有N个挂钩，从左到右排成一排，用来挂N个教室的钥匙。一串钥匙没有固定的悬挂位置，但钥匙上有标识，所以老师们不会弄混钥匙。<br>　　每次取钥匙的时候，老师们都会找到自己所需要的钥匙将其取走，而不会移动其他钥匙。每次还钥匙的时候，还钥匙的老师会找到最左边的空的挂钩，将钥匙挂在这个挂钩上。如果有多位老师还钥匙，则他们按钥匙编号从小到大的顺序还。如果同一时刻既有老师还钥匙又有老师取钥匙，则老师们会先将钥匙全还回去再取出。<br>　　今天开始的时候钥匙是按编号从小到大的顺序放在钥匙盒里的。有K位老师要上课，给出每位老师所需要的钥匙、开始上课的时间和上课的时长，假设下课时间就是还钥匙时间，请问最终钥匙盒里面钥匙的顺序是怎样的？<br>输入格式<br>　　输入的第一行包含两个整数N, K。<br>　　接下来K行，每行三个整数w, s, c，分别表示一位老师要使用的钥匙编号、开始上课的时间和上课的时长。可能有多位老师使用同一把钥匙，但是老师使用钥匙的时间不会重叠。<br>　　保证输入数据满足输入格式，你不用检查数据合法性。<br>输出格式<br>　　输出一行，包含N个整数，相邻整数间用一个空格分隔，依次表示每个挂钩上挂的钥匙编号。<br>样例输入<br>5 2<br>4 3 3<br>2 2 7<br>样例输出<br>1 4 3 2 5<br>样例说明<br>　　第一位老师从时刻3开始使用4号教室的钥匙，使用3单位时间，所以在时刻6还钥匙。第二位老师从时刻2开始使用钥匙，使用7单位时间，所以在时刻9还钥匙。<br>　　每个关键时刻后的钥匙状态如下（X表示空）：<br>　　时刻2后为1X345；<br>　　时刻3后为1X3X5；<br>　　时刻6后为143X5；<br>　　时刻9后为14325。<br>样例输入<br>5 7<br>1 1 14<br>3 3 12<br>1 15 12<br>2 7 20<br>3 18 12<br>4 21 19<br>5 30 9<br>样例输出<br>1 2 3 5 4<br>评测用例规模与约定<br>　　对于30%的评测用例，1 ≤ N, K ≤ 10, 1 ≤ w ≤ N, 1 ≤ s, c ≤ 30；<br>　　对于60%的评测用例，1 ≤ N, K ≤ 50，1 ≤ w ≤ N，1 ≤ s ≤ 300，1 ≤ c ≤ 50；<br>　　对于所有评测用例，1 ≤ N, K ≤ 1000，1 ≤ w ≤ N，1 ≤ s ≤ 10000，1 ≤ c ≤ 100。</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>注：因为同一个老师一定是先借钥匙再还钥匙，所以借与还不存在矛盾，将所有老师借钥匙与还钥匙按时间排序，并且同时有多个老师还钥匙时按钥匙编号顺序排序，然后按序进行借与还的操作。本题中使用结构体，以及比较函数用sort进行排序操作。最终结果只得70分，有待后续改进。</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">/*****************************************</span><br><span class="line">Filename:Main</span><br><span class="line">Author:cwhong</span><br><span class="line">Date:2018.07.06</span><br><span class="line">Description:csp2017-09-2,公共钥匙盒</span><br><span class="line"></span><br><span class="line">******************************************/</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int key[1001];</span><br><span class="line"></span><br><span class="line">typedef struct Teacher</span><br><span class="line">&#123;</span><br><span class="line">// type 为0表示该老师是借，1则是还</span><br><span class="line">int type;</span><br><span class="line">// time 表示老师借或者还钥匙的时间</span><br><span class="line">int time;</span><br><span class="line">// key 表示该钥匙的编号</span><br><span class="line">int key;</span><br><span class="line">&#125;t;</span><br><span class="line"></span><br><span class="line">t teacher[2002];</span><br><span class="line"></span><br><span class="line">bool Compare(t a,t b)</span><br><span class="line">&#123;</span><br><span class="line">// return a.time &lt; b.time;</span><br><span class="line">if (a.time &lt; b.time)</span><br><span class="line">&#123;</span><br><span class="line">// 首先按使用时间排序</span><br><span class="line">return a.time &gt; b.time;</span><br><span class="line">&#125;</span><br><span class="line">else if (a.time == b.time)</span><br><span class="line">&#123;</span><br><span class="line">// 时间相同则还钥匙在前</span><br><span class="line">if (a.type &lt; b.type)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else if (a.type == 1 &amp;&amp; b.type == 1)</span><br><span class="line">&#123;</span><br><span class="line">// 同时有多把钥匙要还则按钥匙编号从小到大顺序还</span><br><span class="line">return a.key &gt; b.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void KeyFunction(int key_num,int teacher_num)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,k;</span><br><span class="line">for (i=teacher_num*2;i&gt;=1;i--)</span><br><span class="line">&#123;</span><br><span class="line">if (teacher[i].type == 0)</span><br><span class="line">&#123;</span><br><span class="line">for (j=1;j&lt;=key_num;j++)</span><br><span class="line">&#123;</span><br><span class="line">if (teacher[i].key == key[j])</span><br><span class="line">&#123;</span><br><span class="line">key[j] = 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (teacher[i].type == 1)</span><br><span class="line">&#123;</span><br><span class="line">for (j=1;j&lt;=key_num;j++)</span><br><span class="line">&#123;</span><br><span class="line">if (key[j] == 0)</span><br><span class="line">&#123;</span><br><span class="line">key[j] = teacher[i].key;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main ()</span><br><span class="line">&#123;</span><br><span class="line">// 钥匙数量，老师数量</span><br><span class="line">int key_num,teacher_num;</span><br><span class="line">cin&gt;&gt;key_num&gt;&gt;teacher_num;</span><br><span class="line"></span><br><span class="line">int i,j,k;</span><br><span class="line">for (i=1;i&lt;=key_num;i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">int a,b,c;</span><br><span class="line">for (i=1;i&lt;=teacher_num;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">teacher[i*2 - 1].type = 0;</span><br><span class="line">teacher[i*2 - 1].time = b;</span><br><span class="line">teacher[i*2 - 1].key = a;</span><br><span class="line">teacher[i*2].type = 1;</span><br><span class="line">teacher[i*2].time = b+c;</span><br><span class="line">teacher[i*2].key = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// cout&lt;&lt;endl;</span><br><span class="line">// for (i=1;i&lt;=teacher_num*2;i++)</span><br><span class="line">// &#123;</span><br><span class="line">// cout&lt;&lt;teacher[i].type&lt;&lt;&quot; &quot;&lt;&lt;teacher[i].time&lt;&lt;&quot; &quot;&lt;&lt;teacher[i].key&lt;&lt;endl;</span><br><span class="line">// &#125;</span><br><span class="line">// cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">sort(teacher + 1,teacher + teacher_num*2 + 1,Compare);</span><br><span class="line"></span><br><span class="line">// for (i=1;i&lt;=teacher_num*2;i++)</span><br><span class="line">// &#123;</span><br><span class="line">// cout&lt;&lt;teacher[i].type&lt;&lt;&quot; &quot;&lt;&lt;teacher[i].time&lt;&lt;&quot; &quot;&lt;&lt;teacher[i].key&lt;&lt;endl;</span><br><span class="line">// &#125;</span><br><span class="line">// cout&lt;&lt;endl;</span><br><span class="line">KeyFunction(key_num,teacher_num);</span><br><span class="line"></span><br><span class="line">for (i=1;i&lt;=key_num;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;key[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;公共钥匙盒&quot;&gt;&lt;a href=&quot;#公共钥匙盒&quot; class=&quot;headerlink&quot; title=&quot;公共钥匙盒&quot;&gt;&lt;/a&gt;公共钥匙盒&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>csp-2014-12-02-Z字形扫描</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/csp-2014-12-02Z%E5%AD%97%E5%BD%A2%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/csp-2014-12-02Z字形扫描/</id>
    <published>2018-12-24T08:14:07.920Z</published>
    <updated>2018-12-24T08:14:07.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Z字形扫描"><a href="#Z字形扫描" class="headerlink" title="Z字形扫描"></a>Z字形扫描</h1><p>&nbsp;</p><h2 id="Program-Description"><a href="#Program-Description" class="headerlink" title="Program Description"></a>Program Description</h2><blockquote><p>| 201412-2 |<br>| 试题名称： | Z字形扫描 |<br>| 时间限制： | 2.0s |<br>| 内存限制： | 256.0MB |<br>| 问题描述： |<br>&nbsp;<br>问题描述<br>&nbsp;<br>　　在图像编码的算法中，需要将一个给定的方形矩阵进行Z字形扫描(Zigzag Scan)。给定一个n×n的矩阵，Z字形扫描的过程如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/12110500-7dc287fa4ff0855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>&nbsp;<br>　　对于下面的4×4的矩阵，<br>　　1 5 3 9<br>　　3 7 5 6<br>　　9 4 6 4<br>　　7 3 1 3<br>　　对其进行Z字形扫描后得到长度为16的序列：<br>　　1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3<br>　　请实现一个Z字形扫描的程序，给定一个n×n的矩阵，输出对这个矩阵进行Z字形扫描的结果。<br>&nbsp;<br>输入格式<br>&nbsp;<br>　　输入的第一行包含一个整数n，表示矩阵的大小。<br>　　输入的第二行到第n+1行每行包含n个正整数，由空格分隔，表示给定的矩阵。<br>&nbsp;<br>输出格式<br>&nbsp;<br>　　输出一行，包含n×n个整数，由空格分隔，表示输入的矩阵经过Z字形扫描后的结果。<br>&nbsp;<br>样例输入<br>&nbsp;<br>4<br>1 5 3 9<br>3 7 5 6<br>9 4 6 4<br>7 3 1 3<br>&nbsp;<br>样例输出<br>&nbsp;<br>1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3<br>&nbsp;<br>评测用例规模与约定<br>&nbsp;<br>　　1≤n≤500，矩阵元素为不超过1000的正整数。</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>注：图中同一斜线上的点x与y坐标之和相同</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/*****************************************</span><br><span class="line">Filename:Main</span><br><span class="line">Author:cwhong</span><br><span class="line">Date:2018.05.25</span><br><span class="line">Description:csp2014-12-02,由图可知在同一斜线上行与列之和相同</span><br><span class="line">******************************************/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int map[501][501];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">// 定义矩阵大小</span><br><span class="line">int input_num;</span><br><span class="line">cin&gt;&gt;input_num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 输入给定的矩阵</span><br><span class="line">int i,j;</span><br><span class="line">for (i=1;i&lt;=input_num;i++)</span><br><span class="line">&#123;</span><br><span class="line">for (j=1;j&lt;=input_num;j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 进行Z字形扫描</span><br><span class="line">int t = 2;</span><br><span class="line">// 立一个标志，表示斜线的方向，0为右上左下，1则相反</span><br><span class="line">int flag = 0;</span><br><span class="line">if (t == 2)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;map[1][1]&lt;&lt;&quot; &quot;;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">for (t;t &lt;= 2 * input_num;t++)</span><br><span class="line">&#123;</span><br><span class="line">if (flag == 0)</span><br><span class="line">&#123;</span><br><span class="line">for (i=1;i&lt;t;i++)</span><br><span class="line">&#123;</span><br><span class="line">if (i &lt;= input_num &amp;&amp; t - i &lt;= input_num)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;map[i][t-i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag = 1;</span><br><span class="line">&#125;</span><br><span class="line">else if (flag == 1)</span><br><span class="line">&#123;</span><br><span class="line">for (i=1;i&lt;t;i++)</span><br><span class="line">&#123;</span><br><span class="line">if (i &lt;= input_num &amp;&amp; t - i &lt;= input_num)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;map[t-i][i]&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Z字形扫描&quot;&gt;&lt;a href=&quot;#Z字形扫描&quot; class=&quot;headerlink&quot; title=&quot;Z字形扫描&quot;&gt;&lt;/a&gt;Z字形扫描&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;Program-Description&quot;&gt;&lt;a href=&quot;#Program-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Madonna pays tribute to Michael Jackson at the memorial service</title>
    <link href="http://yoursite.com/2018/12/24/%E6%97%A5%E5%B8%B8/MadonnapaystributetoMichaelJacksonatthememorialservice/"/>
    <id>http://yoursite.com/2018/12/24/日常/MadonnapaystributetoMichaelJacksonatthememorialservice/</id>
    <published>2018-12-24T08:13:49.972Z</published>
    <updated>2018-12-24T08:13:49.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Madonna-pays-tribute-to-Michael-Jackson-at-the-memorial-service"><a href="#Madonna-pays-tribute-to-Michael-Jackson-at-the-memorial-service" class="headerlink" title="Madonna pays tribute to Michael Jackson at the memorial service"></a>Madonna pays tribute to Michael Jackson at the memorial service</h2><p>&nbsp;</p><blockquote><p>   Michael Jackson was born in August 1951 . So was I . Michael Jackson grew up in the suburbs of the Midwest . So did I . Michael Jackson had eight brothers and sisters . So do I . When Michael Jackson was six , he became a superstar , and was perhaps the world’s most beloved child . When I was six , my mother died . I think he got the shorter end of the stick . I never had a mother , but he never had a childhood . And when you never get to have something , you became obsessed by it . I spent my childhood searching for my mother’s figures , sometimes I was successful , but how do you recreate your childhood when you are under the magnifying glass of the world for your entire life .<br> There is no question that Michael Jackson was one of the greatest talents the world has ever known . That when he sang a song at the ripe old age of eight he could make you feel like an experienced adult was squeezing your heart with his words . That when he moved he had the elegance of Fred Astaire and packed the punch of Muhammad Ali . That his music has an extra layer of inexplicable magic that did’t just make you want to dance but actually made you believe you could fly , dare to dream , be anything that you wanted to be . Because that is what heroes do and Michael Jackson was a hero .<br> He performed in soccer stadiums around the world and sold hundreds of millions of records and dined with prime ministers and presidents . Girls fell in love with him , boys fell in love with him , everyone wanted to dance like him . He seemed otherworldly – but he was a human being . Like most performers he was shy and plagued with insecurities . I can’t say we were great friends , but in 1991 I decided I wanted to try to get to know him better . I asked him out to dinner , I said “My treat , I’ll drive – just you and me .” He agreed and showed up to my house without any bodyguards , we drove to the restaurant in my car . It was dark out , but he was still wearing sunglasses . I said , “Micheal , I feel like I’m talking to a limousine . Do you think you can take off your glasses so I can see your eyes ? ” He paused for a moment then he tossed the glasses out the window , looked at me with a wink and a smile and said , “Can you see me now ? Is that better ? ”<br> In that moment , I could see both his vulnerability and his charm . The rest of the dinner , I was hellbent on getting him to eat French fries , drink wine , have dessert and say bad words . Things he never seemed to allow himself to do . Later we went back to my house to watch a movie and sat on the couch like two kids , and somewhere in the middle of the movie , his hand snuck over and held mine . It felt like he was looking for a friend more than a romance , and I was happy to oblige . In that moment , he did’t feel like a superstar . He felt like a human being .<br> We went out a few more times together , and then for one reason or another we fell out of touch . Then the witch hunt began , and it seemed like one negative story after another was coming out about Michael . I felt his pain , I know what it’s like to walk down the street and feel like the whole world is turned against you . I know what it’s like to feel helpless and unable to defend yourself because the roar of lynch mob is so loud you feel like your voice can never be heard . But I had a childhood , and I was allowed to make mistakes and find my own way in the world without the glare of the spotlight .<br> When I first heard that Michael had died , I was in London , days away from the start of my tour . Michael was going to perform in the same venue as me a week later . All I could think about in this moment was , “I had abandoned him .” That we had abandoned him . That we had allowed this magnificent creature who had once set the world on fire to somehow slip through the cracks . While he was trying to build a family and rebuild his career , we were all passing judgement . Most of us had turned our backs on him . In a desperate attempt to hold on his memory , I went on the Internet to watch old clips of his dancing and singing on TV and a stage and I thought , “my God , he was so unique , so original , so rare , and there will never be anyone like him again . He was a king . ” But he was also a human being , and also we were all human beings and sometimes we have to lose things before we can appreciate them .<br> I want to end this on a positive note and say that to my sons , age nine and four , are obessed with Michael Jackson . There’s a whole lot of crotch grabbing and moon walking going on in my house . And , it seems like a whole new generation of kids have discovered his genius and are bringing him to life again . I hope that wherever Michael is right now he is smiling about this .<br> Yes , Michael Jackson was a human being but he was a king . Long live the king .</p></blockquote><h2 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h2><blockquote><p>迈克尔·杰克逊出生于1958年8月。我也是。迈克尔·杰克逊在美国中西部的郊区长大，我也是。迈克尔·杰克逊有八个兄弟姐妹，我也有。在迈克尔·杰克逊年仅6岁的时候，他便成为了一个超级巨星，或许更是世界上最受钟爱的小孩。而我6岁的时候，母亲永远离开了我。我认为他比我更不幸。我从没有拥有过母爱，而他却从来没有享受过童年。当一个人意识到永远得不到某种东西时，你就会对此念念不忘。我耗尽了童年寻找母亲的形象，；有时我成功了。但当你的一生都被放在放大镜下被人关注时，试问你如何重新找回你的童年？<br>        毫无疑问，迈克尔·杰克逊是世界上最伟大的天才之一……当他还是个8岁的小孩时，他的歌声已经让人感觉像个饱经沧桑的成人在述说他的故事，也因此扣人心弦……他舞动的方式，带着弗雷德·阿斯泰尔（Fred Astaire）的高雅，充满着拳王阿里（Muhammad Ali）的力量……他的音乐附着有一层无法解释魔力，令你不仅仅想随之而舞，更令你相信你可以飞翔，敢于梦想，成为任何你想成为的人。因为这就是英雄的影响力！而迈克尔·杰克逊就是个英雄！<br>        他在世界各地的体育场里表演，他卖出了上亿张唱片，他和总理首相总统共进晚餐。女孩爱上他，男孩爱上他，所有人都想像他一样舞蹈，他看上去就像来自另外一个世界，但他依然是一个普通人。就像大多数表演家一样，他害羞，苦恼着没有安全感。我无法说我们是很要好的朋友，但是在1991年，我决定我要更多地了解他。我邀请他出来共进晚餐：我说：“我请客，我开车，只有你和我。”他答应了，并只身一人不带保镖出现在我家中。我开车和他去餐馆，天已经很黑的可他仍然戴着他的墨镜。于是我说：“迈克尔，我觉得我是在跟这部车说话。你能把眼镜摘掉让我看见你的眼睛吗？”他犹豫了一会儿然后把眼镜扔出窗外，用闪烁的眼睛看着我，微笑着说：“现在你能看见我了没？有没有好点？”<br>        在这时，我终于感受到他的脆弱和他的魅力。晚餐的其它部分，我则是努力要让他吃点炸薯条，喝点酒，享用点甜点，说点脏话，这些事情看上去是他永远不会允许自己去做的。之后，我们回到我的房子，看了部电影，我们坐在沙发上，就像两个孩子，就在电影放映中，他的手悄悄伸过来，握住了我的手。感觉上他是在寻找一个朋友，而不是寻找一份浪漫，我很高兴地遵从了他。在那个时刻，他感觉不像一个超级巨星，他就感觉是一个普通人。<br>        我们后来又一起出去过好几次，但因为一些原因，我们失去了联络。然后，猎杀行动开始了，一个又一个负面故事纠缠着迈克尔。我可以体会他的痛苦。我很清楚当一个人走在街上而全世界似乎都与你为敌的感觉。我也很清楚那种无助和无法为自己辩护的痛苦，因为那些嘶吼着要将你处死的声音实在太大，以至于你确信无论如何，你的声音也不会有人听见。但我有过童年，我可以被允许去犯错误，然后在没有聚光灯闪耀的情况下，再在这个世界上找到属于我的路。<br>        当我听到迈克尔去世的消息时，我正在伦敦，还有几天我就将在这里开始我的巡演。迈克尔也将于一周后在我表演的同一个场馆里开唱。而我当时的感觉便是我遗弃了他。我们都遗弃了他。我们曾让这个如此高贵壮美的生命，这个曾经让世界为之疯狂的生命，不知所以地被我们置之不理！当他试图建立自己的家庭和重拾他的事业时，我们都忙于对他做出评判。我们中的大部分人都对他背过身去。为拼命留住关于他的记忆，我上网，去看那些他在电视和舞台上唱歌跳舞的老片段，这时我想的是，“我的上帝，他是那么的独特，那么的原创，那么的罕见。再也不会有一个人和他一样了。”他就是国王。但他也是一个普通人，而，天啦，我们都是凡人，有时我们必须得等到失去以后，才能真正懂得去珍惜。<br>        最后，我想以一个积极乐观的方式结束我的发言。我的两个儿子，一个9岁，一个4岁，都非常痴迷于迈克尔·杰克逊。他们成天都在家里跳月球漫步，抓着裤裆，就好像全世界新一代的小孩儿们都发现了他的天才，并要让他起死回生。我希望迈克尔现在无论身在何方，他都能为之微笑。<br>        是的，迈克尔·杰克逊是一个凡人，但该死的，他还是一个国王！国王万岁！7</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Madonna-pays-tribute-to-Michael-Jackson-at-the-memorial-service&quot;&gt;&lt;a href=&quot;#Madonna-pays-tribute-to-Michael-Jackson-at-the-memorial-s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1003-Max-Sum</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1003-Max-Sum/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1003-Max-Sum/</id>
    <published>2018-12-24T08:11:18.409Z</published>
    <updated>2018-12-24T08:11:18.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Max-Sum"><a href="#Max-Sum" class="headerlink" title="Max Sum"></a>Max Sum</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 265910    Accepted Submission(s): 63244</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>Given a sequence a[1],a[2],a[3]……a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.<br>&nbsp;<br>Input<br>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).<br>&nbsp;<br>Output<br>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.<br>&nbsp;<br>Sample Input<br>2 5 6 -1 5 4 -7 7 0 6 -1 1 -6 7 -5<br>&nbsp;<br>Sample Output<br>Case 1: 14 1 4 Case 2:<br>7 1 6</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>贪心问题，计算最大子序列，计算以每个节点为终点的最大子序列，若前一个节点最大子序列和为负则当前节点最大子序列和为其本身，否则当前节点加上前一节点的最大子序列和</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.18</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:杭电acm1003</span><br><span class="line"> *  Max Sum     贪心算法，计算每一个点做为终点的最大子序列和</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1003</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int T = input.nextInt();</span><br><span class="line"></span><br><span class="line">        for (int i=0;i&lt;T;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int N = input.nextInt();</span><br><span class="line"></span><br><span class="line">            int[] num_N = new int[N];</span><br><span class="line">            // 输入数列</span><br><span class="line">            for (int j=0;j&lt;N;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                num_N[j] = input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int[][] result = new int[N+1][3];</span><br><span class="line">            result[0][0] = num_N[0];</span><br><span class="line">            result[0][1] = 1;</span><br><span class="line">            result[0][2] = 1;</span><br><span class="line">            result[N][0] = num_N[0];</span><br><span class="line">            result[N][1] = 1;</span><br><span class="line">            result[N][2] = 1;</span><br><span class="line">            for (int j=1;j&lt;N;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (result[j-1][0] &lt; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    result[j][0] = num_N[j];</span><br><span class="line">                    result[j][1] = j+1;</span><br><span class="line">                    result[j][2] = j+1;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    result[j][0] = result[j-1][0] + num_N[j];</span><br><span class="line">                    result[j][1] = result[j-1][1];</span><br><span class="line">                    result[j][2] = j+1;</span><br><span class="line">                &#125;</span><br><span class="line">                if (result[N][0] &lt;= result[j][0])</span><br><span class="line">                &#123;</span><br><span class="line">                    result[N][0] = result[j][0];</span><br><span class="line">                    result[N][1] = result[j][1];</span><br><span class="line">                    result[N][2] = result[j][2];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;Case &quot; + (i+1) + &quot;:&quot;);</span><br><span class="line">            System.out.println(result[N][0] + &quot; &quot; +result[N][1]</span><br><span class="line">                + &quot; &quot; + result[N][2]);</span><br><span class="line">            if (i&lt;T-1)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Max-Sum&quot;&gt;&lt;a href=&quot;#Max-Sum&quot; class=&quot;headerlink&quot; title=&quot;Max Sum&quot;&gt;&lt;/a&gt;Max Sum&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Time Limit: 200
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1009-FatMouse&#39;Trade</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1009-FatMouse&#39;Trade/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1009-FatMouse&#39;Trade/</id>
    <published>2018-12-24T08:11:12.505Z</published>
    <updated>2018-12-24T08:11:12.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FatMouse’-Trade"><a href="#FatMouse’-Trade" class="headerlink" title="FatMouse’ Trade"></a>FatMouse’ Trade</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 84996    Accepted Submission(s): 29492</strong></p></blockquote><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><blockquote><p>FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<br>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]<em> a% pounds of JavaBeans if he pays F[i]</em> a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.<br>&nbsp;<br>Input<br>The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1’s. All integers are not greater than 1000.<br>&nbsp;<br>Output<br>For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.<br>&nbsp;<br>Sample Input<br>5 3<br>7 2<br>4 3<br>5 2<br>20 3<br>25 18<br>24 15<br>15 10<br>-1 -1<br>&nbsp;<br>Sample Output<br>13.333<br>31.500</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>贪心问题，主要就是先排序</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.14</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:acm1099</span><br><span class="line"> *  FatMouse&apos; Trade</span><br><span class="line"> */  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;  </span><br><span class="line">import java.text.DecimalFormat;  </span><br><span class="line"></span><br><span class="line">public class acm1009  </span><br><span class="line">&#123;  </span><br><span class="line">    public static void main(String[] args)  </span><br><span class="line">    &#123;  </span><br><span class="line">        Scanner input = new Scanner(System.in);  </span><br><span class="line">        DecimalFormat df = new DecimalFormat(&quot;0.000&quot;);  </span><br><span class="line"></span><br><span class="line">        int catf_num;  </span><br><span class="line">        int room_num;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();  </span><br><span class="line">        while ((catf_num = input.nextInt()) != -1 &amp;&amp; (room_num = input.nextInt()) != -1)  </span><br><span class="line">        &#123;  </span><br><span class="line">            double[][] source = new double[room_num][2];  </span><br><span class="line">            double[] persent = new double[room_num];  </span><br><span class="line">            for (int i=0;i&lt;room_num;i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                source[i][0] = input.nextDouble();  </span><br><span class="line">                source[i][1] = input.nextDouble();  </span><br><span class="line">                persent[i] = source[i][0]/source[i][1];  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            sortArray(source,persent);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            double getNum = 0.0;  </span><br><span class="line">            for (int i=persent.length-1;i&gt;=0;i--)  </span><br><span class="line">            &#123;  </span><br><span class="line">                // int n = map.get(persent[i]);  </span><br><span class="line">                if (source[i][1] &lt;= catf_num)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    getNum += source[i][0];  </span><br><span class="line">                    catf_num -= source[i][1];  </span><br><span class="line">                &#125;  </span><br><span class="line">                else  </span><br><span class="line">                &#123;  </span><br><span class="line">                    getNum += catf_num * persent[i];  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            System.out.printf(&quot;%.3f&quot;,getNum);  </span><br><span class="line">            System.out.println();  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //对输入的resource进行排序  </span><br><span class="line">    public static void sortArray(int[][] source,double[] persent)  </span><br><span class="line">    &#123;  </span><br><span class="line">        boolean flag = true;  </span><br><span class="line">        Double temp;  </span><br><span class="line">        int[] tempArray = new int[2];  </span><br><span class="line">        for (int i = 0;i&lt;persent.length &amp;&amp; flag;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            flag = false;  </span><br><span class="line">            for (int j = 0;j&lt;persent.length-i-1;j++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                if (persent[j] &gt; persent[j+1])  </span><br><span class="line">                &#123;  </span><br><span class="line">                    temp = persent[j];  </span><br><span class="line">                    persent[j] = persent[j+1];  </span><br><span class="line">                    persent[j+1] = temp;  </span><br><span class="line"></span><br><span class="line">                    tempArray[0] = source[j][0];  </span><br><span class="line">                    tempArray[1] = source[j][1];  </span><br><span class="line"></span><br><span class="line">                    source[j][0] = source[j+1][0];  </span><br><span class="line">                    source[j][1] = source[j+1][1];  </span><br><span class="line"></span><br><span class="line">                    source[j+1][0] = tempArray[0];  </span><br><span class="line">                    source[j+1][1] = tempArray[1];  </span><br><span class="line"></span><br><span class="line">                    flag = true;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    static void sort(double[] a,double[][] c) &#123;  </span><br><span class="line">        int len = a.length;  </span><br><span class="line">        int low = 0,high = len - 1;  </span><br><span class="line">        quickSort(a,c, low, high);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    static void quickSort(double[] a, double[][] c,int l ,int h)&#123;  </span><br><span class="line">        if(l&gt;=h)&#123;  </span><br><span class="line">            return;  </span><br><span class="line">        &#125;  </span><br><span class="line">        int low = l;  </span><br><span class="line">        int high = h;  </span><br><span class="line">        double k = a[low];  </span><br><span class="line">        double k2 = c[low][0];  </span><br><span class="line">        double k3 = c[low][1];  </span><br><span class="line">        while(low&lt; high)&#123;  </span><br><span class="line">            //  </span><br><span class="line">            while(high&gt;low&amp;&amp;a[high]&gt;=k)&#123;//寻找元素右边比其小的  </span><br><span class="line">                high --;  </span><br><span class="line">            &#125;  </span><br><span class="line">            a[low] = a[high];//进行交换，K指向high  </span><br><span class="line">            c[low][0] = c[high][0];  </span><br><span class="line">            c[low][1] = c[high][1];  </span><br><span class="line">            while(low&lt;high&amp;&amp;a[low]&lt;=k)&#123;//寻找元素左边比其大的  </span><br><span class="line">                low++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            a[high] = a[low];//进行交换，K指向low  </span><br><span class="line">            c[high][0] = c[low][0];  </span><br><span class="line">            c[high][1] = c[low][1];  </span><br><span class="line">        &#125;  </span><br><span class="line">        a[low] = k;//将K赋给low  </span><br><span class="line">        c[low][0] = k2;  </span><br><span class="line">        c[low][1] = k3;  </span><br><span class="line">        quickSort(a, c,l, low-1);  </span><br><span class="line">        quickSort(a, c,low+1, h);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FatMouse’-Trade&quot;&gt;&lt;a href=&quot;#FatMouse’-Trade&quot; class=&quot;headerlink&quot; title=&quot;FatMouse’ Trade&quot;&gt;&lt;/a&gt;FatMouse’ Trade&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1010-Tempter-of-the-Bone</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1010-Tempter-of-the-Bone/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1010-Tempter-of-the-Bone/</id>
    <published>2018-12-24T08:11:04.385Z</published>
    <updated>2018-12-24T08:11:04.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tempter-of-the-Bone"><a href="#Tempter-of-the-Bone" class="headerlink" title="Tempter of the Bone"></a>Tempter of the Bone</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 133177    Accepted Submission(s): 35811</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.<br>&nbsp;<br>The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.<br> &nbsp;<br>Input<br>The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 &lt; N, M &lt; 7; 0 &lt; T &lt; 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:<br>&nbsp;<br>‘X’: a block of wall, which the doggie cannot enter;<br>‘S’: the start point of the doggie;<br>‘D’: the Door; or<br>‘.’: an empty block.<br>&nbsp;<br>The input is terminated with three 0’s. This test case is not to be processed.<br> &nbsp;<br>Output<br>For each test case, print in one line “YES” if the doggie can survive, or “NO” otherwise.<br> &nbsp;<br>Sample Input<br>4 4 5 S.X. ..X. ..XD …. 3 4 5 S.X. ..X. …D 0 0 0<br> &nbsp;<br>Sample Output<br>NO<br>YES</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>典型的深度搜索问题，使用dfs算法求解</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">package acm1010;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * date:2017.11.23</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function: 杭电acm1010</span><br><span class="line"> *  Tempter of the Bone     深度搜索    bfs</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class Node</span><br><span class="line">&#123;</span><br><span class="line">    int row,column;</span><br><span class="line"></span><br><span class="line">    public Node(int row,int column)</span><br><span class="line">    &#123;</span><br><span class="line">        this.row = row;</span><br><span class="line">        this.column = column;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Node()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    public static int n,m,T;</span><br><span class="line">    public static boolean visit[][];</span><br><span class="line">    public static int dir[][] = &#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">    public static boolean yes;</span><br><span class="line">    public static Node start = new Node();</span><br><span class="line">    public static Node end = new Node();</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        while (input.hasNextLine())</span><br><span class="line">        &#123;</span><br><span class="line">            n = input.nextInt();</span><br><span class="line">            m = input.nextInt();</span><br><span class="line">            T = input.nextInt();</span><br><span class="line">            input.nextLine();</span><br><span class="line"></span><br><span class="line">            if (n == 0 &amp;&amp; m == 0 &amp;&amp; T == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            visit = new boolean[n][m];</span><br><span class="line">            yes = false;</span><br><span class="line"></span><br><span class="line">            int wall = 0;</span><br><span class="line">            //  输入</span><br><span class="line">            for (int i=0;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                String str = input.nextLine();</span><br><span class="line">                for (int j=0;j&lt;m;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    char c = str.charAt(j);</span><br><span class="line">                    switch(c)</span><br><span class="line">                    &#123;</span><br><span class="line">                        case &apos;X&apos;:visit[i][j] = true;</span><br><span class="line">                            wall++;break;</span><br><span class="line">                        case &apos;S&apos;:start = new Node(i,j);break;</span><br><span class="line">                        case &apos;D&apos;:end = new Node(i,j);break;</span><br><span class="line">                        case &apos;.&apos;:break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (T&gt;n*m - wall - 1)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;NO&quot;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            visit[start.row][start.column] = true;</span><br><span class="line">            dfs(start.row,start.column,0);</span><br><span class="line">            if (yes)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;YES&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;NO&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void dfs(int row,int column,int time)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i=0;i&lt;dir.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int a = row + dir[i][0];</span><br><span class="line">            int b = column + dir[i][1];//   往各个方向搜索</span><br><span class="line">            int thetime = time + 1;</span><br><span class="line">            if (thetime &gt;T)</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (a&lt;0 || a&gt;=n || b&lt;0 || b&gt;=m)</span><br><span class="line">            &#123;   //  越界</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (visit[a][b] == true)</span><br><span class="line">            &#123;   // 被访问过</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (a == end.row &amp;&amp; b == end.column)</span><br><span class="line">            &#123;   // 当访问到终点时</span><br><span class="line">                if (thetime == T)</span><br><span class="line">                &#123;</span><br><span class="line">                    yes = true;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //  每次递归都进行剪枝运算</span><br><span class="line">            int temp = T - thetime - Math.abs(a - end.row) - Math.abs(b - end.column);</span><br><span class="line">            if (temp % 2 == 1)</span><br><span class="line">            &#123;   // 当剪枝结果为奇数时，在该点无法在指定时间到达终点</span><br><span class="line">                //  此时没必要在这点进行递归，当返回上层递归往另一个方向</span><br><span class="line">                //  继续</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            visit[a][b] = true;</span><br><span class="line">            dfs(a,b,thetime);</span><br><span class="line">            //  同一个点在不同路径中可能被再次访问，因此</span><br><span class="line">            //  每一个路径中对应不同的visit</span><br><span class="line">            visit[a][b] = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tempter-of-the-Bone&quot;&gt;&lt;a href=&quot;#Tempter-of-the-Bone&quot; class=&quot;headerlink&quot; title=&quot;Tempter of the Bone&quot;&gt;&lt;/a&gt;Tempter of the Bone&lt;/h1&gt;&lt;p&gt;&amp;n
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1022-Train-Problem-I</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1022-Train-Problem-I/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1022-Train-Problem-I/</id>
    <published>2018-12-24T08:10:49.489Z</published>
    <updated>2018-12-24T08:10:49.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Train-Problem-I"><a href="#Train-Problem-I" class="headerlink" title="Train Problem I"></a>Train Problem I</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 40640    Accepted Submission(s): 15217</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can’t leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.<br><img src="http://upload-images.jianshu.io/upload_images/12110500-d17d643a946eb725.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="https://upload-images.jianshu.io/upload_images/12110500-29de1119f7725bae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/12110500-61746da88ad893e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>&nbsp;<br>Input<br>&nbsp;<br>The input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.<br>&nbsp;<br>Output<br>&nbsp;<br>The output contains a string “No.” if you can’t exchange O2 to O1, or you should output a line contains “Yes.”, and then output your way in exchanging the order(you should output “in” for a train getting into the railway, and “out” for a train getting out of the railway). Print a line contains “FINISH” after each test case. More details in the Sample Output.<br>&nbsp;<br>Sample Input<br>&nbsp;<br>3 123 321 3 123 312<br>&nbsp;<br>Sample Output<br>&nbsp;<br>Yes. in in in out out out FINISH No. FINISH<br>&nbsp;<br><em>Hint</em><br>&nbsp;<br>Hint&nbsp;<br>For the first Sample Input, we let train 1 get in, then train 2 and train 3. So now train 3 is at the top of the railway, so train 3 can leave first, then train 2 and train 1. In the second Sample input, we should let train 3 leave first, so we have to let train 1 get in, then train 2 and train 3. Now we can let train 3 leave. But after that we can’t let train 1 leave before train 2, because train 2 is at the top of the railway at the moment.<br>&nbsp;<br>So we output “No.”.</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>//栈和队列的使用</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*date:2017.11.09</span><br><span class="line">*author:孟小德</span><br><span class="line">*function:蓝桥杯试题</span><br><span class="line">*   模拟栈</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1022</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;int[]&gt; resultList = new ArrayList&lt;int[]&gt;();</span><br><span class="line">        while (input.hasNextInt())</span><br><span class="line">        &#123;</span><br><span class="line">            int num = input.nextInt();</span><br><span class="line"></span><br><span class="line">            String pushstring = input.next();</span><br><span class="line">            String popstring = input.next();</span><br><span class="line"></span><br><span class="line">            String[] pushStr = new String[num];</span><br><span class="line">            String[] popStr = new String[num];</span><br><span class="line">            Stack&lt;String&gt; stack = new Stack&lt;String&gt;();</span><br><span class="line">            int[] result = new int[2*num + 1];</span><br><span class="line"></span><br><span class="line">            //分割字符串</span><br><span class="line">            for (int i=0;i&lt;num;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                pushStr[i] = pushstring.substring(i,i+1);</span><br><span class="line">                popStr[i] = popstring.substring(i,i+1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result[0] = 1;</span><br><span class="line">            int pop_index = 0;</span><br><span class="line">            int push_index = 0;</span><br><span class="line">            int j = 1;</span><br><span class="line">            while (pop_index != num)</span><br><span class="line">            &#123;</span><br><span class="line">                if (stack.empty() == true &amp;&amp; push_index != num)</span><br><span class="line">                &#123;</span><br><span class="line">                    stack.push(pushStr[push_index]);</span><br><span class="line">                    push_index++;</span><br><span class="line">                    result[j] = 1;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (stack.empty() == false &amp;&amp; push_index !=num)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (popStr[pop_index].equals(stack.peek()))</span><br><span class="line">                    &#123;</span><br><span class="line">                        stack.pop();</span><br><span class="line">                        pop_index++;</span><br><span class="line">                        result[j] = -1;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        stack.push(pushStr[push_index]);</span><br><span class="line">                        push_index++;</span><br><span class="line">                        result[j] = 1;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (stack.empty() == false &amp;&amp; push_index ==num)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (popStr[pop_index].equals(stack.peek()))</span><br><span class="line">                    &#123;</span><br><span class="line">                        stack.pop();</span><br><span class="line">                        pop_index++;</span><br><span class="line">                        result[j] = -1;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        result[0] = 0;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            resultList.add(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //输出结果</span><br><span class="line">        for (int k = 0;k&lt;resultList.size();k++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            if (resultList.get(k)[0] == 1)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;Yes.&quot;);</span><br><span class="line">                for (int i=1;i&lt;resultList.get(k).length;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (resultList.get(k)[i] == 1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(&quot;in&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(&quot;out&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;No.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;FINISH&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Train-Problem-I&quot;&gt;&lt;a href=&quot;#Train-Problem-I&quot; class=&quot;headerlink&quot; title=&quot;Train Problem I&quot;&gt;&lt;/a&gt;Train Problem I&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1026-Ignatius-and-the-Princess</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1026-Ignatius-and-the-Princess-I/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1026-Ignatius-and-the-Princess-I/</id>
    <published>2018-12-24T08:10:44.921Z</published>
    <updated>2018-12-24T08:10:44.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ignatius-and-the-Princess-I"><a href="#Ignatius-and-the-Princess-I" class="headerlink" title="Ignatius and the Princess I"></a>Ignatius and the Princess I</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 20281    Accepted Submission(s): 6605<br>Special Judge</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>The Princess has been abducted by the BEelzebub feng5166, our hero Ignatius has to rescue our pretty Princess. Now he gets into feng5166’s castle. The castle is a large labyrinth. To make the problem simply, we assume the labyrinth is a N<em>M two-dimensional array which left-top corner is (0,0) and right-bottom corner is (N-1,M-1). Ignatius enters at (0,0), and the door to feng5166’s room is at (N-1,M-1), that is our target. There are some monsters in the castle, if Ignatius meet them, he has to kill them. Here is some rules:<br>&nbsp;<br>1.Ignatius can only move in four directions(up, down, left, right), one step per second. A step is defined as follow: if current position is (x,y), after a step, Ignatius can only stand on (x-1,y), (x+1,y), (x,y-1) or (x,y+1).<br>2.The array is marked with some characters and numbers. We define them like this:<br>. : The place where Ignatius can walk on.<br>X : The place is a trap, Ignatius should not walk on it.<br>n : Here is a monster with n HP(1&lt;=n&lt;=9), if Ignatius walk on it, it takes him n seconds to kill the monster.<br>&nbsp;<br>Your task is to give out the path which costs minimum seconds for Ignatius to reach target position. You may assume that the start position and the target position will never be a trap, and there will never be a monster at the start position.<br>&nbsp;<br>Input<br>The input contains several test cases. Each test case starts with a line contains two numbers N and M(2&lt;=N&lt;=100,2&lt;=M&lt;=100) which indicate the size of the labyrinth. Then a N</em>M two-dimensional array follows, which describe the whole labyrinth. The input is terminated by the end of file. More details in the Sample Input.<br>&nbsp;<br>Output<br>For each test case, you should output “God please help our poor hero.” if Ignatius can’t reach the target position, or you should output “It takes n seconds to reach the target position, let me show you the way.”(n is the minimum seconds), and tell our hero the whole path. Output a line contains “FINISH” after each test case. If there are more than one path, any one is OK in this problem. More details in the Sample Output.<br>&nbsp;<br>Sample Input<br>5 6 .XX.1. ..X.2. 2…X. …XX. XXXXX. 5 6 .XX.1. ..X.2. 2…X. …XX. XXXXX1 5 6 .XX… ..XX1. 2…X. …XX. XXXXX.<br>&nbsp;<br>Sample Output<br>It takes 13 seconds to reach the target position, let me show you the way. 1s:(0,0)-&gt;(1,0) 2s:(1,0)-&gt;(1,1) 3s:(1,1)-&gt;(2,1) 4s:(2,1)-&gt;(2,2) 5s:(2,2)-&gt;(2,3) 6s:(2,3)-&gt;(1,3) 7s:(1,3)-&gt;(1,4) 8s:FIGHT AT (1,4) 9s:FIGHT AT (1,4) 10s:(1,4)-&gt;(1,5) 11s:(1,5)-&gt;(2,5) 12s:(2,5)-&gt;(3,5) 13s:(3,5)-&gt;(4,5) FINISH It takes 14 seconds to reach the target position, let me show you the way. 1s:(0,0)-&gt;(1,0) 2s:(1,0)-&gt;(1,1) 3s:(1,1)-&gt;(2,1) 4s:(2,1)-&gt;(2,2) 5s:(2,2)-&gt;(2,3) 6s:(2,3)-&gt;(1,3) 7s:(1,3)-&gt;(1,4) 8s:FIGHT AT (1,4) 9s:FIGHT AT (1,4) 10s:(1,4)-&gt;(1,5) 11s:(1,5)-&gt;(2,5) 12s:(2,5)-&gt;(3,5) 13s:(3,5)-&gt;(4,5) 14s:FIGHT AT (4,5) FINISH God please help our poor hero.<br>FINISH</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>这道题也是典型的深度搜索问题，要注意的就是在打印结果时从目标节点递归找到起点在依次在退出递归时打印每个节点的信息</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">package acm1026;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * date:2017.11.30;</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function: 杭电acm1026  Ignatius and the Princess I</span><br><span class="line"> *      bfs 广度搜索</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class Node implements Comparable&lt;Node&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public int x,y,step;</span><br><span class="line">    public Node()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int compareTo(Node object)</span><br><span class="line">    &#123;</span><br><span class="line">        return this.step - object.step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    //  四个方向</span><br><span class="line">    public static int[][] dir = &#123;&#123;0,1&#125;,&#123;0,-1&#125;,&#123;1,0&#125;,&#123;-1,0&#125;&#125;;</span><br><span class="line">    public static int map[][];</span><br><span class="line">    public static int flag[][];</span><br><span class="line">    public static int blood[][];</span><br><span class="line">    public static int n,m;</span><br><span class="line"></span><br><span class="line">    public static int judge(int x,int y)</span><br><span class="line">    &#123;</span><br><span class="line">        if (x&lt;0 || x&gt;=n || y&lt;0 || y&gt;=m)</span><br><span class="line">        &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (map[x][y] == -1)</span><br><span class="line">        &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int BFS()</span><br><span class="line">    &#123;</span><br><span class="line">        PriorityQueue&lt;Node&gt; queue = new PriorityQueue&lt;Node&gt;();</span><br><span class="line">        Node start = new Node();</span><br><span class="line">        Node next = new Node();</span><br><span class="line">        start.x = 0;</span><br><span class="line">        start.y = 0;</span><br><span class="line">        start.step = 0;</span><br><span class="line">        map[0][0] = -1;</span><br><span class="line"></span><br><span class="line">        queue.add(start);</span><br><span class="line">        while(queue.isEmpty() == false)</span><br><span class="line">        &#123;</span><br><span class="line">            start = new Node();</span><br><span class="line">            start = queue.poll();</span><br><span class="line"></span><br><span class="line">            if (start.x == n-1 &amp;&amp; start.y == m-1)</span><br><span class="line">            &#123;</span><br><span class="line">                return start.step;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i=0;i&lt;4;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                next = new Node();</span><br><span class="line">                next.x = start.x + dir[i][0];</span><br><span class="line">                next.y = start.y + dir[i][1];</span><br><span class="line"></span><br><span class="line">                if (judge(next.x,next.y) == 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                next.step = start.step + 1 + map[next.x][next.y];</span><br><span class="line">                flag[next.x][next.y] = i+1;</span><br><span class="line">                map[next.x][next.y] = -1;</span><br><span class="line">                queue.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int temp;</span><br><span class="line">    public static void print(int x,int y)</span><br><span class="line">    &#123;   //  用递归方法顺序输出</span><br><span class="line">        //  外层递归为路径末尾</span><br><span class="line">        int next_x,next_y;</span><br><span class="line">        if (flag[x][y] == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        next_x = x - dir[flag[x][y] - 1][0];</span><br><span class="line">        next_y = y - dir[flag[x][y] - 1][1];</span><br><span class="line">        print(next_x,next_y);</span><br><span class="line">        temp++;</span><br><span class="line">        System.out.printf(&quot;%ds:(%d,%d)-&gt;(%d,%d)\n&quot;,temp,next_x,next_y,x,y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 输出战斗过程</span><br><span class="line">        while (blood[x][y] &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            temp++;</span><br><span class="line">            System.out.printf(&quot;%ds:FIGHT AT (%d,%d)\n&quot;,temp,x,y);</span><br><span class="line">            blood[x][y]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        String str = new String();</span><br><span class="line">        int result;</span><br><span class="line">        while (input.hasNextInt())</span><br><span class="line">        &#123;</span><br><span class="line">            n = input.nextInt();</span><br><span class="line">            m = input.nextInt();</span><br><span class="line">            input.nextLine();</span><br><span class="line"></span><br><span class="line">            map = new int[n][m];</span><br><span class="line">            flag = new int[n][m];</span><br><span class="line">            blood = new int[n][m];</span><br><span class="line"></span><br><span class="line">            for (int i=0;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                str = input.nextLine();</span><br><span class="line">                for (int j=0;j&lt;m;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    char c = str.charAt(j);</span><br><span class="line">                    if (c == &apos;.&apos;)</span><br><span class="line">                    &#123;</span><br><span class="line">                        map[i][j] = 0;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (c == &apos;X&apos;)</span><br><span class="line">                    &#123;</span><br><span class="line">                        map[i][j] = -1;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        map[i][j] = c - &apos;0&apos;;</span><br><span class="line">                        blood[i][j] = c - &apos;0&apos;;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = BFS();</span><br><span class="line">            if (result == -1)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(&quot;God please help our poor hero.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.printf(&quot;It takes %d seconds to reach the target position, let me show you the way.\n&quot;,result);</span><br><span class="line"></span><br><span class="line">                temp = 0;</span><br><span class="line">                print(n-1,m-1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;FINISH&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ignatius-and-the-Princess-I&quot;&gt;&lt;a href=&quot;#Ignatius-and-the-Princess-I&quot; class=&quot;headerlink&quot; title=&quot;Ignatius and the Princess I&quot;&gt;&lt;/a&gt;Ignat
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1051-Wooden-Sticks</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1051-Wooden-Sticks/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1051-Wooden-Sticks/</id>
    <published>2018-12-24T08:10:40.689Z</published>
    <updated>2018-12-24T08:10:40.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Wooden-Sticks"><a href="#Wooden-Sticks" class="headerlink" title="Wooden Sticks"></a>Wooden Sticks</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 23191    Accepted Submission(s): 9411</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>There is a pile of n wooden sticks. The length and weight of each stick are known in advance. The sticks are to be processed by a woodworking machine in one by one fashion. It needs some time, called setup time, for the machine to prepare processing a stick. The setup times are associated with cleaning operations and changing tools and shapes in the machine. The setup times of the woodworking machine are given as follows:<br>&nbsp;<br>(a) The setup time for the first wooden stick is 1 minute.<br>(b) Right after processing a stick of length l and weight w , the machine will need no setup time for a stick of length l’ and weight w’ if l&lt;=l’ and w&lt;=w’. Otherwise, it will need 1 minute for setup.<br>&nbsp;<br>You are to find the minimum setup time to process a given pile of n wooden sticks. For example, if you have five sticks whose pairs of length and weight are (4,9), (5,2), (2,1), (3,5), and (1,4), then the minimum setup time should be 2 minutes since there is a sequence of pairs (1,4), (3,5), (4,9), (2,1), (5,2).<br>&nbsp;<br>Input<br>The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of two lines: The first line has an integer n , 1&lt;=n&lt;=5000, that represents the number of wooden sticks in the test case, and the second line contains n 2 positive integers l1, w1, l2, w2, …, ln, wn, each of magnitude at most 10000 , where li and wi are the length and weight of the i th wooden stick, respectively. The 2n integers are delimited by one or more spaces.<br>&nbsp;<br>Output<br>The output should contain the minimum setup time in minutes, one per line.<br>&nbsp;<br>Sample Input<br>3 5 4 9 5 2 2 1 3 5 1 4 3 2 2 1 1 2 2 3 1 3 2 2 3 1<br>&nbsp;<br>Sample Output<br>2 1 3</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>//贪心问题，先处理最长最重的木头以便一台机器可以处理尽可能多的木头，</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.15</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:杭电acm1051</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1051</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int num = input.nextInt();</span><br><span class="line">        int[] result = new int[num];</span><br><span class="line">        for (int j=0;j&lt;num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            int wood_num = input.nextInt();</span><br><span class="line">            wood[] array = new wood[wood_num];</span><br><span class="line">            for (int i=0;i&lt;wood_num;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                int len = input.nextInt();</span><br><span class="line">                int weight = input.nextInt();</span><br><span class="line">                array[i] = new wood(len,weight);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sort(array);</span><br><span class="line">            int use_num = 0;</span><br><span class="line">            result[j] = 0;</span><br><span class="line">            wood temp = new wood();</span><br><span class="line">            while (use_num &lt; wood_num)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int i=0;i&lt;wood_num;i++)</span><br><span class="line">                &#123;   //寻找未处理木头中最长最重的一根</span><br><span class="line">                    if(array[i].use == false)</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp = array[i];</span><br><span class="line"></span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                for (int i=0;i&lt;wood_num;i++)</span><br><span class="line">                &#123;// 寻找可以被同时处理的木头</span><br><span class="line">                    if (array[i].use == false &amp;&amp; array[i].len &lt;= temp.len &amp;&amp;</span><br><span class="line">                    array[i].weight &lt;= temp.weight)</span><br><span class="line">                    &#123;</span><br><span class="line">                        array[i].use = true;</span><br><span class="line">                        use_num++;</span><br><span class="line">                        temp = array[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result[j]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i=0;i&lt;result.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(result[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //按长度排序，长度相同则按重量排序</span><br><span class="line">    public static void sort(wood[] array)</span><br><span class="line">    &#123;</span><br><span class="line">        boolean flag = true;</span><br><span class="line">        wood temp = new wood();</span><br><span class="line">        for (int i = 0;i&lt;array.length &amp;&amp; flag;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            for (int j = 0;j&lt;array.length-i-1;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (array[j].len &lt; array[j+1].len)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp.len = array[j].len;</span><br><span class="line">                    temp.weight = array[j].weight;</span><br><span class="line"></span><br><span class="line">                    array[j].len = array[j+1].len;</span><br><span class="line">                    array[j].weight = array[j+1].weight;</span><br><span class="line"></span><br><span class="line">                    array[j+1].len = temp.len;</span><br><span class="line">                    array[j+1].weight = temp.weight;</span><br><span class="line">                    flag = true;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (array[j].len == array[j+1].len)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (array[j].weight &lt; array[j+1].weight)</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp.len = array[j].len;</span><br><span class="line">                        temp.weight = array[j].weight;</span><br><span class="line"></span><br><span class="line">                        array[j].len = array[j+1].len;</span><br><span class="line">                        array[j].weight = array[j+1].weight;</span><br><span class="line"></span><br><span class="line">                        array[j+1].len = temp.len;</span><br><span class="line">                        array[j+1].weight = temp.weight;</span><br><span class="line">                        flag = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class wood</span><br><span class="line">&#123;</span><br><span class="line">    public int len;</span><br><span class="line">    public int weight;</span><br><span class="line">    public boolean use = false;</span><br><span class="line"></span><br><span class="line">    public wood()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public wood(int len,int weight)</span><br><span class="line">    &#123;</span><br><span class="line">        this.len = len;</span><br><span class="line">        this.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Wooden-Sticks&quot;&gt;&lt;a href=&quot;#Wooden-Sticks&quot; class=&quot;headerlink&quot; title=&quot;Wooden Sticks&quot;&gt;&lt;/a&gt;Wooden Sticks&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1052-田忌赛马</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1052-%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1052-田忌赛马/</id>
    <published>2018-12-24T08:10:36.969Z</published>
    <updated>2018-12-24T08:10:36.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tian-Ji-–-The-Horse-Racing"><a href="#Tian-Ji-–-The-Horse-Racing" class="headerlink" title="Tian Ji – The Horse Racing"></a>Tian Ji – The Horse Racing</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 32825    Accepted Submission(s): 9972</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>Here is a famous story in Chinese history.<br>&nbsp;<br>“That was about 2300 years ago. General Tian Ji was a high official in the country Qi. He likes to play horse racing with the king and others.”<br>&nbsp;<br>“Both of Tian and the king have three horses in different classes, namely, regular, plus, and super. The rule is to have three rounds in a match; each of the horses must be used in one round. The winner of a single round takes two hundred silver dollars from the loser.”<br>&nbsp;<br>“Being the most powerful man in the country, the king has so nice horses that in each class his horse is better than Tian’s. As a result, each time the king takes six hundred silver dollars from Tian.”<br>&nbsp;<br>“Tian Ji was not happy about that, until he met Sun Bin, one of the most famous generals in Chinese history. Using a little trick due to Sun, Tian Ji brought home two hundred silver dollars and such a grace in the next match.”<br>&nbsp;<br>“It was a rather simple trick. Using his regular class horse race against the super class from the king, they will certainly lose that round. But then his plus beat the king’s regular, and his super beat the king’s plus. What a simple trick. And how do you think of Tian Ji, the high ranked official in China?”<br>&nbsp;<br><img src="http://upload-images.jianshu.io/upload_images/12110500-1f5128115058db62.gif?imageMogr2/auto-orient/strip" alt="image"><br>&nbsp;<br>Were Tian Ji lives in nowadays, he will certainly laugh at himself. Even more, were he sitting in the ACM contest right now, he may discover that the horse racing problem can be simply viewed as finding the maximum matching in a bipartite graph. Draw Tian’s horses on one side, and the king’s horses on the other. Whenever one of Tian’s horses can beat one from the king, we draw an edge between them, meaning we wish to establish this pair. Then, the problem of winning as many rounds as possible is just to find the maximum matching in this graph. If there are ties, the problem becomes more complicated, he needs to assign weights 0, 1, or -1 to all the possible edges, and find a maximum weighted perfect matching…<br>&nbsp;<br>However, the horse racing problem is a very special case of bipartite matching. The graph is decided by the speed of the horses — a vertex of higher speed always beat a vertex of lower speed. In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem.<br>&nbsp;<br>In this problem, you are asked to write a program to solve this special case of matching problem.<br>&nbsp;<br>Input<br>&nbsp;<br>The input consists of up to 50 test cases. Each case starts with a positive integer n (n &lt;= 1000) on the first line, which is the number of horses on each side. The next n integers on the second line are the speeds of Tian’s horses. Then the next n integers on the third line are the speeds of the king’s horses. The input ends with a line that has a single 0 after the last test case.<br>&nbsp;<br>Output<br>&nbsp;<br>For each input case, output a line containing a single number, which is the maximum money Tian Ji will get, in silver dollars.<br>&nbsp;<br>Sample Input<br>&nbsp;<br>3 92 83 71 95 87 74 2 20 20 20 20 2 20 19 22 18 0<br>&nbsp;<br>Sample Output<br>&nbsp;<br>200 0 0</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>田忌赛马，首先用田忌最差的马和国王最差的马比较赢或输都赛一场，若平局则用田忌最好的马与国王最好的马比若赢则赛一场若输则用田忌最差的马与国王最好的赛一场，以这个顺序依次较量，得到最好的结果</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.15</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:杭电acm1052</span><br><span class="line"> *  田忌赛马</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1052</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int num;</span><br><span class="line"></span><br><span class="line">        while((num = input.nextInt()) != 0)</span><br><span class="line">        &#123;</span><br><span class="line">            int[] tian = new int[num];</span><br><span class="line">            int[] king = new int[num];</span><br><span class="line"></span><br><span class="line">            for (int i=0;i&lt;num;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                tian[i] = input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (int i=0;i&lt;num;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                king[i] = input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.sort(tian);</span><br><span class="line">            Arrays.sort(king);</span><br><span class="line"></span><br><span class="line">            int win = 0;</span><br><span class="line">            int tian_h = tian.length-1;</span><br><span class="line">            int tian_l = 0;</span><br><span class="line">            int king_h = king.length-1;</span><br><span class="line">            int king_l = 0;</span><br><span class="line"></span><br><span class="line">            while (tian_l &lt;= tian_h)</span><br><span class="line">            &#123;</span><br><span class="line">                if (tian[tian_l] &gt; king[king_l])</span><br><span class="line">                &#123;</span><br><span class="line">                    win ++;</span><br><span class="line">                    tian_l++;</span><br><span class="line">                    king_l++;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (tian[tian_l] &lt; king[king_l])</span><br><span class="line">                &#123;</span><br><span class="line">                    win--;</span><br><span class="line">                    tian_l++;</span><br><span class="line">                    king_h--;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    if (tian[tian_h] &gt; king[king_h])</span><br><span class="line">                    &#123;</span><br><span class="line">                        win++;</span><br><span class="line">                        tian_h--;</span><br><span class="line">                        king_h--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (tian[tian_l] &lt; king[king_h])</span><br><span class="line">                        &#123;</span><br><span class="line">                            win--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        tian_l++;</span><br><span class="line">                        king_h--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(win * 200);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tian-Ji-–-The-Horse-Racing&quot;&gt;&lt;a href=&quot;#Tian-Ji-–-The-Horse-Racing&quot; class=&quot;headerlink&quot; title=&quot;Tian Ji – The Horse Racing&quot;&gt;&lt;/a&gt;Tian Ji 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1062-Text-Reverse</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1062-Text-Reverse/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1062-Text-Reverse/</id>
    <published>2018-12-24T08:10:32.485Z</published>
    <updated>2018-12-24T08:10:32.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Text-Reverse"><a href="#Text-Reverse" class="headerlink" title="Text Reverse"></a>Text Reverse</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 34449    Accepted Submission(s): 13532</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>Ignatius likes to write words in reverse way. Given a single line of text which is written by Ignatius, you should reverse all the words and then output them.<br>&nbsp;<br>Input<br>The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains a single line with several words. There will be at most 1000 characters in a line.<br>&nbsp;<br>Output<br>For each test case, you should output the text which is processed.<br>&nbsp;<br>Sample Input<br>3 olleh !dlrow m’I morf .udh I ekil .mca<br>&nbsp;<br>Sample Output<br>hello world! I’m from hdu. I like acm.<br>Hint<br>Remember to use getchar() to read ‘\n’ after the interger T, then you may use gets() to read a line and process it.</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>//简单的字符串处理</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.12</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:acm试题1062</span><br><span class="line"> *  Text Reverse 文本倒置</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1062</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int num = input.nextInt();</span><br><span class="line">        input.nextLine();</span><br><span class="line"></span><br><span class="line">        String[] string = new String[num];</span><br><span class="line">        for (int i=0;i&lt;num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string[i] = input.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] result = new String[num];</span><br><span class="line">        for (int i=0;i&lt;num;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            String[] str = string[i].split(&quot; &quot;);    //分割字符串</span><br><span class="line"></span><br><span class="line">            result[i] = stringReverse(str[0]);</span><br><span class="line">            for (int j = 1;j&lt;str.length;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                result[i] = result[i] + &quot; &quot; + stringReverse(str[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //末尾空格加上</span><br><span class="line">            int n = string[i].length() - result[i].length();</span><br><span class="line">            for (int j = 0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                result[i] += &quot; &quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0;i&lt;num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(result[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //翻转单词字母</span><br><span class="line">    public static String stringReverse(String str)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        if (str.equals(&quot;&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            String string = String.valueOf(str.charAt(str.length()-1));</span><br><span class="line">            for (int i=str.length()-2;i&gt;=0;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                string += String.valueOf(str.charAt(i));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return string;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Text-Reverse&quot;&gt;&lt;a href=&quot;#Text-Reverse&quot; class=&quot;headerlink&quot; title=&quot;Text Reverse&quot;&gt;&lt;/a&gt;Text Reverse&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1180-诡异的楼梯</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1180-%E8%AF%A1%E5%BC%82%E7%9A%84%E6%A5%BC%E6%A2%AF/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1180-诡异的楼梯/</id>
    <published>2018-12-24T08:09:51.310Z</published>
    <updated>2018-12-24T08:09:51.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="诡异的楼梯"><a href="#诡异的楼梯" class="headerlink" title="诡异的楼梯"></a>诡异的楼梯</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/65536 K (Java/Others)<br>Total Submission(s): 16275    Accepted Submission(s): 4276</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>Hogwarts正式开学以后,Harry发现在Hogwarts里,某些楼梯并不是静止不动的，相反,他们每隔一分钟就变动一次方向.<br>比如下面的例子里,一开始楼梯在竖直方向,一分钟以后它移动到了水平方向,再过一分钟它又回到了竖直方向.Harry发现对他来说很难找到能使得他最快到达目的地的路线,这时Ron(Harry最好的朋友)告诉Harry正好有一个魔法道具可以帮助他寻找这样的路线,而那个魔法道具上的咒语,正是由你纂写的.<br>&nbsp;<br>Input<br>&nbsp;<br>测试数据有多组，每组的表述如下：<br>第一行有两个数,M和N,接下来是一个M行N列的地图,’<em>‘表示障碍物,’.’表示走廊,’|’或者’-‘表示一个楼梯,并且标明了它在一开始时所处的位置:’|’表示的楼梯在最开始是竖直方向,’-‘表示的楼梯在一开始是水平方向.地图中还有一个’S’是起点,’T’是目标,0&lt;=M,N&lt;=20,地图中不会出现两个相连的梯子.Harry每秒只能停留在’.’或’S’和’T’所标记的格子内.<br>&nbsp;<br>Output<br>&nbsp;<br>只有一行,包含一个数T,表示到达目标的最短时间.<br>注意:Harry只能每次走到相邻的格子而不能斜走,每移动一次恰好为一分钟,并且Harry登上楼梯并经过楼梯到达对面的整个过程只需要一分钟,Harry从来不在楼梯上停留.并且每次楼梯都恰好在Harry移动完毕以后才改变方向.<br>&nbsp;<br>Sample Input<br>&nbsp;<br>5 5 <strong>..T </strong>.</em>. ..|.. .<em>.</em>. S….<br>&nbsp;<br>Sample Output<br>&nbsp;<br>7<br>&nbsp;<br><em>Hint</em><br>&nbsp;<br>Hint<br>&nbsp;<br>地图如下： <img src="http://upload-images.jianshu.io/upload_images/12110500-16db75f159ad2247.gif?imageMogr2/auto-orient/strip" alt="image"></p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>这是一个广度优先搜索问题 其中容易被忽略的一点就是当楼梯不可通过时可以在原地等一秒再通过</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">package acm1180;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * date:2017.12.7</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:    杭电acm1180</span><br><span class="line"> *      诡异的楼梯</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">class Node</span><br><span class="line">&#123;</span><br><span class="line">    int row,column,time;</span><br><span class="line">    public Node(int row,int column,int time)</span><br><span class="line">    &#123;</span><br><span class="line">        this.row = row;</span><br><span class="line">        this.column = column;</span><br><span class="line">        this.time = time;</span><br><span class="line">    &#125;</span><br><span class="line">    public Node(int row,int column)</span><br><span class="line">    &#123;</span><br><span class="line">        this.row = row;</span><br><span class="line">        this.column = column;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    public static int[][] map;</span><br><span class="line">    public static boolean[][] visit;</span><br><span class="line">    public static int M,N,time;</span><br><span class="line">    public static Node S,T;</span><br><span class="line">    public static int[][] dir = &#123;&#123;-1,0&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">    // public static int flag;     //记录前一次的方向</span><br><span class="line"></span><br><span class="line">    public static boolean crossBorder(int r,int c)</span><br><span class="line">    &#123;</span><br><span class="line">        if (r &lt; 1 || c &lt; 1 || r &gt; M || c &gt; N)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (map[r][c] == 0 || visit[r][c] == true)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void BFS()</span><br><span class="line">    &#123;</span><br><span class="line">        Queue&lt;Node&gt; nodeQ = new LinkedList&lt;Node&gt;();</span><br><span class="line">        nodeQ.add(S);</span><br><span class="line">        while (!nodeQ.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Node curNode = nodeQ.poll();</span><br><span class="line">            if ((curNode.row == T.row) &amp;&amp; (curNode.column == T.column))</span><br><span class="line">            &#123;</span><br><span class="line">                if (curNode.time &lt; time)</span><br><span class="line">                &#123;</span><br><span class="line">                    time = curNode.time;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = 0;i&lt;4;i++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                int r = curNode.row + dir[i][0];</span><br><span class="line">                int c = curNode.column + dir[i][1];</span><br><span class="line">                visit[curNode.row][curNode.column] = true;</span><br><span class="line">                if (!crossBorder(r,c))</span><br><span class="line">                &#123;</span><br><span class="line">                    Node temp;</span><br><span class="line">                    if (map[r][c] == 1)</span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                        temp = new Node(r,c,curNode.time+1);</span><br><span class="line">                        nodeQ.add(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        while ((curNode.time + i + map[r][c]) % 2 == 0)</span><br><span class="line">                        &#123;</span><br><span class="line">                            curNode.time++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        r += dir[i][0];</span><br><span class="line">                        c += dir[i][1];</span><br><span class="line">                        if (!crossBorder(r,c))</span><br><span class="line">                        &#123;</span><br><span class="line">                            temp = new Node(r,c,curNode.time+1);</span><br><span class="line">                            nodeQ.add(temp);</span><br><span class="line">                        &#125;</span><br><span class="line">                        curNode.time--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        while (input.hasNextInt())</span><br><span class="line">        &#123;</span><br><span class="line">            M = input.nextInt();    //地图行</span><br><span class="line">            N = input.nextInt();    //地图列</span><br><span class="line">            map = new int[M+1][N+1];    //地图信息</span><br><span class="line">            visit = new boolean[M+1][N+1];  //节点是否访问过</span><br><span class="line"></span><br><span class="line">            input.nextLine();</span><br><span class="line"></span><br><span class="line">            // 输入</span><br><span class="line">            for (int i=0;i&lt;M;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                String str = input.nextLine();</span><br><span class="line">                char c;</span><br><span class="line">                for (int j=0;j&lt;N;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    c = str.charAt(j);</span><br><span class="line">                    switch (c)</span><br><span class="line">                    &#123;</span><br><span class="line">                        case &apos;*&apos;:</span><br><span class="line">                            map[i+1][j+1] = 0;</span><br><span class="line">                            visit[i+1][j+1] = true;</span><br><span class="line">                            break;</span><br><span class="line">                        case &apos;.&apos;:</span><br><span class="line">                            map[i+1][j+1] = 1;</span><br><span class="line">                            visit[i+1][j+1] = false;</span><br><span class="line">                            break;</span><br><span class="line">                        case &apos;-&apos;:</span><br><span class="line">                            map[i+1][j+1] = -2;     //时间加上此处的值对2取模，</span><br><span class="line">                            visit[i+1][j+1] = false;</span><br><span class="line">                            break;</span><br><span class="line">                        case &apos;|&apos;:</span><br><span class="line">                            map[i+1][j+1] = -1;     //若值为1则楼梯竖，否则横</span><br><span class="line">                            visit[i+1][j+1] = false;</span><br><span class="line">                            break;</span><br><span class="line">                        case &apos;S&apos;:</span><br><span class="line">                            map[i+1][j+1] = 1;</span><br><span class="line">                            visit[i+1][j+1] = false;</span><br><span class="line">                            S = new Node(i+1,j+1,0);</span><br><span class="line">                            break;</span><br><span class="line">                        case &apos;T&apos;:</span><br><span class="line">                            map[i+1][j+1] = 1;</span><br><span class="line">                            visit[i+1][j+1] = false;</span><br><span class="line">                            T = new Node(i+1,j+1);</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            time = 100;</span><br><span class="line"></span><br><span class="line">            BFS();</span><br><span class="line">            System.out.println(time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;诡异的楼梯&quot;&gt;&lt;a href=&quot;#诡异的楼梯&quot; class=&quot;headerlink&quot; title=&quot;诡异的楼梯&quot;&gt;&lt;/a&gt;诡异的楼梯&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Time Limit: 2000/1000 M
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杭电acm1232-畅通工程</title>
    <link href="http://yoursite.com/2018/12/24/%E7%A8%8B%E5%BA%8F%E6%97%A5%E8%AE%B0%E6%9C%AC/%E6%9D%AD%E7%94%B5acm1232-%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/24/程序日记本/杭电acm1232-畅通工程/</id>
    <published>2018-12-24T08:09:42.998Z</published>
    <updated>2018-12-24T08:09:42.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="畅通工程"><a href="#畅通工程" class="headerlink" title="畅通工程"></a>畅通工程</h1><p>&nbsp;</p><blockquote><p><strong>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)<br>Total Submission(s): 59587    Accepted Submission(s): 31854</strong></p></blockquote><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><blockquote><p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？<br>&nbsp;<br>Input<br>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。<br>&nbsp;<br>Output<br>对每个测试用例，在1行里输出最少还需要建设的道路数目。<br>&nbsp;<br>Sample Input<br>4 2 1 3 4 3 3 3 1 2 1 3 2 3 5 2 1 2 3 5 999 0 0<br>&nbsp;<br>Sample Output<br>1 0 2<br>998</p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>这是一个最小生成树和并查集问题，先使用并查集处理随后在查看有多少未联通的城镇即有多少点的根结点为其本身</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * date:2017.11.20</span><br><span class="line"> * author:孟小德</span><br><span class="line"> * function:杭电acm1232</span><br><span class="line"> *      畅通工程    使用查并集方法</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class acm1232</span><br><span class="line">&#123;</span><br><span class="line">    public static int[] father;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Scanner input = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        int N,M;</span><br><span class="line">        int result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        while (input.hasNextInt())</span><br><span class="line">        &#123;</span><br><span class="line">            N = input.nextInt();</span><br><span class="line">            if (N == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            M = input.nextInt();</span><br><span class="line">            father = new int[N+1];</span><br><span class="line">            for (int i=1;i&lt;N+1;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                father[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (int i=0;i&lt;M;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                int a = input.nextInt();</span><br><span class="line">                int b = input.nextInt();</span><br><span class="line">                union(a,b);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = 0;</span><br><span class="line">            //若该树是联通的，那么只有一个节点的父节点是其自身</span><br><span class="line">            for (int i=1;i&lt;N+1;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (father[i] == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    result++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(result - 1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void union(int m,int n)</span><br><span class="line">    &#123;</span><br><span class="line">        //合并集合</span><br><span class="line">        int a = getParent(m);</span><br><span class="line">        int b = getParent(n);</span><br><span class="line"></span><br><span class="line">        if (a!=b)</span><br><span class="line">        &#123;</span><br><span class="line">            father[a] = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int getParent(int m)</span><br><span class="line">    &#123;</span><br><span class="line">        //寻找节点的根节点</span><br><span class="line">        while (father[m] != m)</span><br><span class="line">        &#123;</span><br><span class="line">            m = father[m];</span><br><span class="line">        &#125;</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;畅通工程&quot;&gt;&lt;a href=&quot;#畅通工程&quot; class=&quot;headerlink&quot; title=&quot;畅通工程&quot;&gt;&lt;/a&gt;畅通工程&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Time Limit: 4000/2000 MS (J
      
    
    </summary>
    
    
  </entry>
  
</feed>
